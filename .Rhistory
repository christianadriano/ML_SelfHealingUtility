p4<- ggplot(dt,aes(x=itemCount))+
geom_histogram(binwidth = 0.2) +
ggtitle(title) +
theme(plot.title = element_text(size = fontSize))+
labs(y="question count", x=paste(profession," workers per question"));
profession<-"Other";
dt<-countItem(dataf,profession);
title<- paste("Fig.5 ",profession," across questions");
p5<- ggplot(dt,aes(x=itemCount))+
geom_histogram(binwidth = 0.2) +
ggtitle(title) +
theme(plot.title = element_text(size = 12))+
labs(y="question count", x=paste(profession," workers per question"));
multiplot(p1,p2,p3,p4,p5,cols=2)
View(summaryTable)
?unique
unique(summaryTable$Question.ID)
summaryTable$
questionIDList<-unique(summaryTable$Question.ID);
for(id in questionIDList){
print(id)
}
summaryTable$
questionIDList<-unique(summaryTable$Question.ID);
questionIDList
summaryTable$
questionIDList["ID"]<-unique(summaryTable$Question.ID);
summaryTable$
questionIDList["ID"]<-data.frame(unique(summaryTable$Question.ID));
summaryTable$
questionIDList<-data.frame(unique(summaryTable$Question.ID));
questionIDList
summaryTable$
questionIDList<-data.frame(unique(summaryTable$Question.ID));
questionIDList<-data.frame(unique(summaryTable$Question.ID));
questionIDList
colnames(questionIDList)<-c("ID");
for(id in questionIDList$ID){
print(id)
}
View(summaryTable)
View(summaryTable)
head(dataf)
subset_df<-subset(dataf,select=c(Answer.confidence))
#mark all rows that match the selection
confidence_1_count<- rowSums(subset_df==1);
subset_df["1"] <- confidence_1_count;
confidence_2_count<- rowSums(subset_df==2);
subset_df["2"] <- confidence_2_count;
confidence_3_count<- rowSums(subset_df==3);
subset_df["3"] <- confidence_3_count;
confidence_4_count<- rowSums(subset_df==4);
subset_df["4"] <- confidence_4_count;
confidence_5_count<- rowSums(subset_df==5);
subset_df["5"] <- confidence_5_count;
subset_df["QuestionID"] <- dataf$Question.ID;
subset_df <-subset(subset_df,select= c(QuestionID,confidence_1_count,confidence_2_count,confidence_3_count,confidence_4_count,confidence_5_count));
question_by <- group_by(subset_df,QuestionID);
summaryTable<- summarize(question_by,Total_1 = sum(confidence_1_count),Total_2 = sum(confidence_2_count),
TotalIDK = sum(confidence_3_count), Total_4=sum(confidence_4_count),
Total_5 = sum(confidence_5_count));
colnames(summaryTable)<-c("Question.ID","conf.1","conf.2","conf.3","conf.4","conf.5");
library(dplyr);
subset_df<-subset(dataf,select=c(Answer.confidence))
confidence_1_count<- rowSums(subset_df==1);
subset_df["1"] <- confidence_1_count;
confidence_2_count<- rowSums(subset_df==2);
subset_df["2"] <- confidence_2_count;
confidence_3_count<- rowSums(subset_df==3);
subset_df["3"] <- confidence_3_count;
confidence_4_count<- rowSums(subset_df==4);
subset_df["4"] <- confidence_4_count;
confidence_5_count<- rowSums(subset_df==5);
subset_df["5"] <- confidence_5_count;
subset_df["QuestionID"] <- dataf$Question.ID;
subset_df <-subset(subset_df,select= c(QuestionID,confidence_1_count,confidence_2_count,confidence_3_count,confidence_4_count,confidence_5_count));
question_by <- group_by(subset_df,QuestionID);
summaryTable<- summarize(question_by,Total_1 = sum(confidence_1_count),Total_2 = sum(confidence_2_count),
TotalIDK = sum(confidence_3_count), Total_4=sum(confidence_4_count),
Total_5 = sum(confidence_5_count));
colnames(summaryTable)<-c("Question.ID","conf.1","conf.2","conf.3","conf.4","conf.5");
View(summaryTable)
subset_df<-subset(dataf,select=c(Answer.confidence))
confidence_1_count<- rowSums(subset_df==1);
confidence_1_count
subset_df["1"] <- confidence_1_count;
subset_df
confidence_2_count<- rowSums(subset_df==2);
subset_df["2"] <- confidence_2_count;
head(subset_df)
confidence_3_count<- rowSums(subset_df==3);
subset_df["3"] <- confidence_3_count;
confidence_4_count<- rowSums(subset_df==4);
subset_df["4"] <- confidence_4_count;
confidence_5_count<- rowSums(subset_df==5);
subset_df["5"] <- confidence_5_count;
subset_df["QuestionID"] <- dataf$Question.ID;
head(subset_df)
subset_df <-subset(subset_df,select= c(QuestionID,confidence_1_count,confidence_2_count,
confidence_3_count,confidence_4_count,confidence_5_count));
question_by <- group_by(subset_df,QuestionID);
summaryTable<- summarize(question_by,
Total_1 = sum(confidence_1_count),Total_2 = sum(confidence_2_count),
Total_3 = sum(confidence_3_count), Total_4=sum(confidence_4_count),
Total_5 = sum(confidence_5_count));
colnames(summaryTable)<-c("Question.ID","conf.1","conf.2","conf.3","conf.4","conf.5");
head(summaryTable)
subset_df <-subset(subset_df,select= c(QuestionID,confidence_1_count,confidence_2_count,
confidence_3_count,confidence_4_count,confidence_5_count));
head(subset_df)
question_by <- group_by(subset_df,QuestionID);
head(question_by)
ubset_df <-subset(dataf,select= c(Answer.option));
subset_df <- data.frame(subset_df);
#mark all rows that match the selection
YesCount<- rowSums(subset_df=="YES");
subset_df["YesCount"] <- YesCount;
NoCount<- rowSums(subset_df=="NO");
subset_df["NoCount"] <- NoCount;
IDKCount<- rowSums(subset_df=="IDK");
subset_df["IDKCount"] <- IDKCount;
subset_df["QuestionID"] <- dataf$Question.ID;
subset_df <-subset(subset_df,select= c(QuestionID,YesCount,NoCount,IDKCount));
##Group by question ID, which means adding all the values from the parallel columns in order to have
#a sum for each questionID
question_by <- group_by(subset_df,QuestionID);
summaryTable<- summarize(question_by,TotalYes = sum(YesCount),TotalNo = sum(NoCount), TotalIDK = sum(IDKCount));
colnames(summaryTable)<-c("Question.ID","Yes.Count","No.Count","IDK.Count");
return(summaryTable);
subset_df <-subset(dataf,select= c(Answer.option));
subset_df <- data.frame(subset_df);
YesCount<- rowSums(subset_df=="YES");
subset_df["YesCount"] <- YesCount;
NoCount<- rowSums(subset_df=="NO");
subset_df["NoCount"] <- NoCount;
IDKCount<- rowSums(subset_df=="IDK");
subset_df["IDKCount"] <- IDKCount;
subset_df["QuestionID"] <- dataf$Question.ID;
subset_df <-subset(subset_df,select= c(QuestionID,YesCount,NoCount,IDKCount));
question_by <- group_by(subset_df,QuestionID);
summaryTable<- summarize(question_by,TotalYes = sum(YesCount),TotalNo = sum(NoCount), TotalIDK = sum(IDKCount));
colnames(summaryTable)<-c("Question.ID","Yes.Count","No.Count","IDK.Count");
head(summaryTable)
subset_df<-subset(dataf,select=c(Answer.confidence))
confidence_1_count<- rowSums(subset_df=="1");
subset_df["1"] <- confidence_1_count;
confidence_2_count<- rowSums(subset_df=="2");
subset_df["2"] <- confidence_2_count;
confidence_3_count<- rowSums(subset_df=="3");
subset_df["3"] <- confidence_3_count;
confidence_4_count<- rowSums(subset_df=="4");
subset_df["4"] <- confidence_4_count;
confidence_5_count<- rowSums(subset_df=="5");
subset_df["5"] <- confidence_5_count;
subset_df["QuestionID"] <- dataf$Question.ID;
subset_df <-subset(subset_df,select= c(QuestionID,confidence_1_count,confidence_2_count,
confidence_3_count,confidence_4_count,confidence_5_count));
question_by <- group_by(subset_df,QuestionID);
summaryTable<- summarize(question_by,
Total_1 = sum(confidence_1_count),Total_2 = sum(confidence_2_count),
Total_3 = sum(confidence_3_count), Total_4=sum(confidence_4_count),
Total_5 = sum(confidence_5_count));
colnames(summaryTable)<-c("Question.ID","conf.1","conf.2","conf.3","conf.4","conf.5");
dataf
subset_df <-subset(subset_df,select= c(QuestionID,1,2,3,4,5));
question_by <- group_by(subset_df,QuestionID);
summaryTable<- summarize(question_by,
Total_1 = sum(confidence_1_count),Total_2 = sum(confidence_2_count),
Total_3 = sum(confidence_3_count), Total_4=sum(confidence_4_count),
Total_5 = sum(confidence_5_count));
colnames(summaryTable)<-c("Question.ID","conf.1","conf.2","conf.3","conf.4","conf.5");
head(summaryTable)
subset_df<-subset(dataf,select=c(Answer.confidence))
subset_df<-subset(dataf,select=c(Answer.confidence))
#mark all rows that match the selection
confidence_1_count<- rowSums(subset_df=="1");
subset_df["conf.1"] <- confidence_1_count;
confidence_2_count<- rowSums(subset_df=="2");
subset_df["conf.2"] <- confidence_2_count;
confidence_3_count<- rowSums(subset_df=="3");
subset_df["conf.3"] <- confidence_3_count;
confidence_4_count<- rowSums(subset_df=="4");
subset_df["conf.4"] <- confidence_4_count;
confidence_5_count<- rowSums(subset_df=="5");
subset_df["conf.5"] <- confidence_5_count;
subset_df["QuestionID"] <- dataf$Question.ID;
subset_df <-subset(subset_df,select= c(QuestionID,conf.1,conf.2,conf.3,conf.4,conf.5));
question_by <- group_by(subset_df,QuestionID);
summaryTable<- summarize(question_by,
Total_1 = sum(confidence_1_count),Total_2 = sum(confidence_2_count),
Total_3 = sum(confidence_3_count), Total_4=sum(confidence_4_count),
Total_5 = sum(confidence_5_count));
colnames(summaryTable)<-c("Question.ID","conf.1","conf.2","conf.3","conf.4","conf.5");
subset_df<-subset(dataf,select=c(Answer.confidence))
confidence_1_count<- rowSums(subset_df=="1");
subset_df["conf.1"] <- confidence_1_count;
head(subset_df)
subset_df<-subset(dataf,select=c(Answer.confidence))
#mark all rows that match the selection
confidence_1_count<- rowSums(subset_df=="1");
subset_df["conf.1"] <- conf.1;
confidence_2_count<- rowSums(subset_df=="2");
subset_df["conf.2"] <- conf.2;
confidence_3_count<- rowSums(subset_df=="3");
subset_df["conf.3"] <- conf.3;
confidence_4_count<- rowSums(subset_df=="4");
subset_df["conf.4"] <- conf.4;
confidence_5_count<- rowSums(subset_df=="5");
subset_df["conf.5"] <- conf.5;
subset_df["QuestionID"] <- dataf$Question.ID;
subset_df<-subset(dataf,select=c(Answer.confidence))
confidence_1_count<- rowSums(subset_df=="1");
subset_df<-subset(dataf,select=c(Answer.confidence))
#mark all rows that match the selection
conf.1<- rowSums(subset_df=="1");
subset_df["conf.1"] <- conf.1;
conf.2<- rowSums(subset_df=="2");
subset_df["conf.2"] <- conf.2;
conf.3<- rowSums(subset_df=="3");
subset_df["conf.3"] <- conf.3;
conf.4<- rowSums(subset_df=="4");
subset_df["conf.4"] <- conf.4;
conf.5<- rowSums(subset_df=="5");
subset_df["conf.5"] <- conf.5;
subset_df["QuestionID"] <- dataf$Question.ID;
subset_df <-subset(subset_df,select= c(QuestionID,conf.1,conf.2,conf.3,conf.4,conf.5));
question_by <- group_by(subset_df,QuestionID);
summaryTable<- summarize(question_by,
Total_1 = sum(conf.1),Total_2 = sum(conf.2),
Total_3 = sum(conf.3), Total_4=sum(conf.4),
Total_5 = sum(conf.5));
colnames(summaryTable)<-c("Question.ID","conf.1","conf.2","conf.3","conf.4","conf.5");
summaryTable["utility"]<-summaryTable$conf.1+2*summaryTable$conf.2+3*summaryTable$conf.3+4*summaryTable$conf.4+5*summmaryTable$conf.5;
summaryTable["utility"]<-summaryTable$conf.1+2*summaryTable$conf.2+3*summaryTable$conf.3+
4*summaryTable$conf.4+5*summaryTable$conf.5;
questionID_f <- data.frame(unique(dataf$Question.ID));
colnames(questionID_f)<- c("id");
questionSet<-dataf[dataf$Session.ID=id]
questionSet<-dataf[dataf$Session.ID=id,]
questionSet<-dataf[dataf$Question.ID==id,]
head(questionSet)
head(questionSet$Question.ID
;
head(questionSet$Question.ID;
head(questionSet$Question.ID);
id=1;
questionSet<-dataf[dataf$Question.ID==id,]
sampled_df<- sample_n(questionSet, 5)
sampled_df
dim(sampled_df)
sampled_dataf<-data.frame();
questionID_f <- data.frame(unique(dataf$Question.ID));
colnames(questionID_f)<- c("id");
id=1;
questionSet<-dataf[dataf$Question.ID==id,]
sampled_df<- sample_n(questionSet, 5)
sampled_dataf<-rbind(sampled_dataf,sampled_df);
sampled_dataf
id=2;
questionSet<-dataf[dataf$Question.ID==id,]
sampled_df<- sample_n(questionSet, 5)
sampled_dataf<-rbind(sampled_dataf,sampled_df);
sampled_dataf
dim(sampled_dataf)
sampled_dataf<-data.frame();
questionID_f <- data.frame(unique(dataf$Question.ID));
colnames(questionID_f)<- c("id");
for(id in questionID_f$id){
questionSet<-dataf[dataf$Question.ID==id,]
sampled_df<- sample_n(questionSet, 5)
sampled_dataf<-rbind(sampled_dataf,sampled_df);
}
dim(sampled_dataf)
confidence_utility<-function(df){
subset_df<-subset(df,select=c(Answer.confidence))
#mark all rows that match the selection
conf.1<- rowSums(subset_df=="1");
subset_df["conf.1"] <- conf.1;
conf.2<- rowSums(subset_df=="2");
subset_df["conf.2"] <- conf.2;
conf.3<- rowSums(subset_df=="3");
subset_df["conf.3"] <- conf.3;
conf.4<- rowSums(subset_df=="4");
subset_df["conf.4"] <- conf.4;
conf.5<- rowSums(subset_df=="5");
subset_df["conf.5"] <- conf.5;
subset_df["QuestionID"] <- df$Question.ID;
subset_df <-subset(subset_df,select= c(QuestionID,conf.1,conf.2,conf.3,conf.4,conf.5));
question_by <- group_by(subset_df,QuestionID);
summaryTable<- summarize(question_by,
Total_1 = sum(conf.1),Total_2 = sum(conf.2),
Total_3 = sum(conf.3),Total_4=sum(conf.4),
Total_5 = sum(conf.5));
colnames(summaryTable)<-c("Question.ID","conf.1","conf.2","conf.3","conf.4","conf.5");
summaryTable["utility"]<-summaryTable$conf.1+2*summaryTable$conf.2+3*summaryTable$conf.3+
4*summaryTable$conf.4+5*summaryTable$conf.5;
}
confidence_utility<-function(df){
subset_df<-subset(df,select=c(Answer.confidence))
#mark all rows that match the selection
conf.1<- rowSums(subset_df=="1");
subset_df["conf.1"] <- conf.1;
conf.2<- rowSums(subset_df=="2");
subset_df["conf.2"] <- conf.2;
conf.3<- rowSums(subset_df=="3");
subset_df["conf.3"] <- conf.3;
conf.4<- rowSums(subset_df=="4");
subset_df["conf.4"] <- conf.4;
conf.5<- rowSums(subset_df=="5");
subset_df["conf.5"] <- conf.5;
subset_df["QuestionID"] <- df$Question.ID;
subset_df <-subset(subset_df,select= c(QuestionID,conf.1,conf.2,conf.3,conf.4,conf.5));
question_by <- group_by(subset_df,QuestionID);
summaryTable<- summarize(question_by,
Total_1 = sum(conf.1),Total_2 = sum(conf.2),
Total_3 = sum(conf.3),Total_4=sum(conf.4),
Total_5 = sum(conf.5));
colnames(summaryTable)<-c("Question.ID","conf.1","conf.2","conf.3","conf.4","conf.5");
summaryTable["utility"]<-summaryTable$conf.1+2*summaryTable$conf.2+3*summaryTable$conf.3+
4*summaryTable$conf.4+5*summaryTable$conf.5;
return(summaryTable);
}
utility_table<-confidence_utility(df=sampled_dataf);
?sort
utility_table<-sort(utility_table,utility_table$utility,decreasing = TRUE);
utility_table<-data.frame(sort(utility_table,utility_table$utility,decreasing = TRUE));
sort(utility_table,utility_table$utility,decreasing = TRUE)
utility_table<-utility_table[order(utility_table$utility),];
head(utility_table)
utility_table<-utility_table[order(utility_table$utility, decreasing = TRUE),];
head(utility_table)
topQuestions<-utility_table[1:5,];
topQuestions
sampleAnswers<- function(questionList, answers_df){
sampled_dataf<-data.frame();
questionID_f <- data.frame(unique(answers_df$Question.ID));
colnames(questionID_f)<- c("id");
for(id in questionID_f$id){
questionSet<-answers_df[answers_df$Question.ID==id,]
sampled_df<- sample_n(questionSet, 5)
sampled_dataf<-rbind(sampled_dataf,sampled_df);
}
return(sampled_dataf);
}
view(answer_df)
View(answer_df)
View(dataf)
View(dataf)
source('C:/Users/chris/OneDrive/Documentos/GitHub/ML_VotingAggregation/aggregateVotes.R')
outcomes$precision <- 1
outcomes<- data.frame();
outcomes$precision <- 1
outcomes$precision <- 1
colnames(outcomes)<-c("precision","recall","sensibility","sensitivity","accuracy");
colnames(outcomes)<-c("precision","recall","sensibility","sensitivity","accuracy");
outcomes<- data.frame();
colnames(outcomes)<-c("precision","recall","sensibility","sensitivity","accuracy");
outcomes<- data.frame(1:5);
colnames(outcomes)<-c("precision","recall","sensibility","sensitivity","accuracy");
outcomes<- data.frame(c(1:5));
colnames(outcomes)<-c("precision","recall","sensibility","sensitivity","accuracy");
outcomes<- data.frame(c(1:5));
colnames(outcomes)<-c("precision","recall","sensibility","sensitivity","accuracy");
outcomes
matrix(1:5, ncol = 5, nrow = 1)
outcomes <- matrix(1:5, ncol = 5, nrow = 1)
colnames(outcomes)<-c("precision","recall","sensibility","sensitivity","accuracy");
outcomes
outcomes$precision <- 1
outcomes
outcomes<- matrix();
outcomes
colnames(outcomes)<-c("precision","recall","sensibility","sensitivity","accuracy");
colnames(outcomes)<-c("precision");
outcomes
outcomes$precision<-1
outcomes
outcomes<- data.frame(1;2;3;4;5);
outcomes<- list(precision=0, recall=0, sensibility=0, sensitivity=0, accuracy=0);
outcomesMatrix <- rbind(outcomesMatrix,outcomes);
outcomesf<-data.frame(outcomes);
accumOutcomes <- rbind(accumOutcomes,outcomesf);
accumOutcomes <- rbind(accumOutcomes,outcomesf);
accumOutcomes<- data.frame();
accumOutcomes <- rbind(outcomesf,outcomesf);
accumOutcomes<- list();
accumOutcomes <- rbind(accumOutcomes,outcomesf);
accumOutcomes
outcomes<- list(precision=1, recall=0, sensibility=0, sensitivity=0, accuracy=0);
outcomesf<-data.frame(outcomes);
accumOutcomes <- rbind(accumOutcomes,outcomesf);
accumOutcomes
data<- c(2:2.5,0.1)
data
data<- c(2:2.5)
data
?c
c(2:5)
start <- 2
end <- 2.5
data <- seq(a,b,sign(b-a)*0.5)
data <- seq(start,end,sign(b-a)*0.5)
data <- seq(start,end,sign(end-start)*0.5)
data
data <- seq(start,end,sign(end-start)*0.1)
data
logY <- log(data)
logY
x <- c(1:6)
x
plot(x=x,y=data)
plot(x=x,y=logY)
invLogY=1/logY
invData <- 1/data
plot(x=x,y=invData)
plot(x=x,y=invLogY)
plot(x=x,y=invData)
logY <- log2(data)
invLogY=1/logY
plot(x=x,y=invLogY)
library(xgboost)
library(pROC)
# load data
source("C://Users//chris//OneDrive//Documentos//GitHub//ML_SelfHealingUtility//loadData.R");
dataf<-loadData(fileName="data//Random_10000Failures_without_inapplicable_rules.csv");
dataf<-dataf[dataf$UTILITY.INCREASE!=0,]
# Select feature columns --------------------------------------------------
featuresdf<- data.frame(dataf$CRITICALITY,dataf$CONNECTIVITY,dataf$RELIABILITY, dataf$IMPORTANCE,
dataf$PROVIDED_INTERFACE, dataf$REQUIRED_INTERFACE, dataf$ADT, dataf$UTILITY.INCREASE);
colnames(featuresdf) <- c("Connectivity", "Criticality","Reliability","Importance","Provided.Interface",
"Required.Interface","ADT","Utility.Increase");
set.seed(8850);
g<- runif((nrow(featuresdf))); #generates a random distribution
featuresdf <- featuresdf[order(g),];
# Extract training ad validation sets -------------------------------------
#Training = used to create a model
#Validation = used to compute prediction error (Bias)
totalData = dim(featuresdf)[1];
trainingSize = trunc(totalData * 0.7);
startTestIndex = totalData - trainingSize;
endTestIndex = totalData;
trainingData<- as.data.frame(featuresdf[1:trainingSize,]);
validationData<-as.data.frame(featuresdf[startTestIndex:endTestIndex,]);
# Build model -------------------------------------------------------------
xgb.train.data = xgb.DMatrix(data.matrix(trainingData[,1:7]),
label = trainingData[,"Utility.Increase"],
missing = NA)
param <- list(objective = "reg:linear", base_score = 0.5)
xgboost.cv = xgb.cv(param=param, data = xgb.train.data, nfold = 10, nrounds = 1500,
early_stopping_rounds = 100, metrics='rmse')
best_iteration = xgboost.cv$best_iteration
xgb.model <- xgboost(param =param,  data = xgb.train.data, nrounds=best_iteration)
xgb.model
xgb.test.data = xgb.DMatrix(data.matrix(validationData[,1:7]), missing = NA)
xgb.preds = predict(xgb.model, xgb.test.data)
xgb.roc_obj <- roc(validationData[,"Utility.Increase"], xgb.preds)
rmse <- function(error){
sqrt(mean(error^2))
}
r_squared <- function(prediction, actual){
SS_ExplainedVariance <- sum((prediction - actual)^2);
SS_TotalVariance <- sum((actual-mean(actual))^2);
R2<- 1- SS_ExplainedVariance / SS_TotalVariance;
return (R2);
}
y_pred <- predict(xgb.model, as.matrix(validationData));
error <- y_pred - validationData$Utility.Increase;
meanError <- mean(y_pred - validationData$Utility.Increase)
percentMeanError <- meanError / mean(validationData$Utility.Increase)*100;
percentMeanError
rmse_value <- rmse(error);
rmse_value
prediction <- data.frame(y_pred);
actual <- data.frame(validationData$Utility.Increase);
R2 <- r_squared(prediction,as.numeric(validationData$Utility.Increase));
R2
plot(error) + title(main="Training error")
percentMeanError
xyplot(y_pred ~Utility.Increase,validationData, grid=TRUE,
type = c("p", "smooth"), col.line = "darkorange", lwd = 1, main="Predicted versus Actual");
library(lattice)
xyplot(y_pred ~Utility.Increase,validationData, grid=TRUE,
type = c("p", "smooth"), col.line = "darkorange", lwd = 1, main="Predicted versus Actual");
cor(y_pred,validationData$Utility.Increase)
refError <- error/validationData$Utility.Increase
meanError <- mean(y_pred - validationData$Utility.Increase)
plot(refError) + title(main="Relative error")
library(xgboostExplainer)
explainer = buildExplainer(xgb.model,xgb.train.data, type="regression",
base_score = 0.5,
n_first_tree = xgb.model$best_ntreelimit - 1)
pred.breakdown = explainPredictions(xgb.model, explainer, xgb.test.data)
cat('Breakdown Complete','\n')
weights = rowSums(pred.breakdown)
pred.xgb = 1/(1+exp(-weights))
cat(max(xgb.preds-pred.xgb),'\n')
idx_to_get = as.integer(300)
validationData[idx_to_get,1:7]
showWaterfall(xgb.model, explainer, xgb.test.data, data.matrix(validationData[,1:7]),
idx_to_get, type = "regression")
plot(validationData[,"Required.Interface"], t(pred.breakdown[,"Required.Interface"]), cex=0.4, pch=16,
xlab = "Required.Interface", ylab = "Required.Interface impact on log-odds")
plot(validationData[,"Provided.Interface"], t(pred.breakdown[,"Provided.Interface"]), cex=0.4, pch=16,
xlab = "Provided.Interface", ylab = "Provided.Interface impact on log-odds")
plot(validationData[,"Importance"], t(pred.breakdown[,"Importance"]), cex=0.4, pch=16,
xlab = "Importance", ylab = "Importance impact on log-odds")
plot(validationData[,"ADT"], t(pred.breakdown[,"ADT"]), cex=0.4, pch=16,
xlab = "ADT", ylab = "ADT impact on log-odds")
plot(validationData[,"Reliability"], t(pred.breakdown[,"Reliability"]), cex=0.4, pch=16,
xlab = "Reliability", ylab = "Reliability impact on log-odds")
plot(validationData[,"Connectivity"], t(pred.breakdown[,"Connectivity"]), cex=0.4, pch=16,
xlab = "Connectivity", ylab = "Connectivity impact on log-odds")
