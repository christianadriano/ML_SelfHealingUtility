results.line <- results.line+1;
fileName <- paste0(folder,dataset.name.list[3],".csv");
data.df <- loadData(fileName);
#data_all <- read.csv(fileName,header = TRUE,sep=",");
features.df <- prepareFeatures(data.df,"ALL");
#Extract training ad validation sets
totalData.size <- dim(features.df)[1];
training.size <- trunc(totalData.size * 0.7);
startTestIndex <- totalData.size - training.size;
training.df <- as.data.frame(features.df[1:training.size,]);
validation.df <-as.data.frame(features.df[startTestIndex:totalData.size,]);
#Train model
outcome.list <- trainGBM(training.df,interaction,numberOfTrees=5000,kfolds=10);
#Validate model
results.df <- validateGBM(outcome.list,validation.df,dataset.name.list,results.line,results.df,interaction);
}
#Load utility functions
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//loadData.R");
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//xboostRegression.R");
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//gbmRegression.R");
#Data structure to keep results
#Folder with training data
folder <- "C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//data//DataPoints_1K-3K-9K//";
#folder <- "//DataPoints_1K-3K-9K//";
# CONTROL CODE   ------------------------------------------------------------
model.name <- c("Linear","Discontinuous","Saturating","ALL")[1];
method.name <- c("GBM","XGBoost","LigthGBM")[1];
dataset.name.list <- generateDataSetNames(model.name, c("1K","3K","9K"),0);
results.df <- data.frame(matrix(data=NA,nrow=5,ncol=10));
colnames(results.df) <- c("Item","Utility_Type","Number_of_Trees","RMSE","R_Squared", "MAPD","User_Time","Sys_Time","Elapsed_Time","Leaf_Nodes");
results.line<-0;
#for(i in c(1:length(dataset.name.list))){
for(interaction in c(1,2,3,4,5,6,7,8,9,10)){#},10,50,100)){
results.line <- results.line+1;
fileName <- paste0(folder,dataset.name.list[3],".csv");
data.df <- loadData(fileName);
#data_all <- read.csv(fileName,header = TRUE,sep=",");
features.df <- prepareFeatures(data.df,"ALL");
#Extract training ad validation sets
totalData.size <- dim(features.df)[1];
training.size <- trunc(totalData.size * 0.7);
startTestIndex <- totalData.size - training.size;
training.df <- as.data.frame(features.df[1:training.size,]);
validation.df <-as.data.frame(features.df[startTestIndex:totalData.size,]);
#Train model
outcome.list <- trainGBM(training.df,interaction,numberOfTrees=5000,kfolds=10);
#Validate model
results.df <- validateGBM(outcome.list,validation.df,dataset.name.list,results.line,results.df,interaction);
}
#print(results.df); #show on the console
message <- resultsToFile(results.df,model.name,"_70-30_NOFeatureSelection.csv"); #save to a .csv file
print(message);
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//loadData.R");
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//xboostRegression.R");
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//gbmRegression.R");
#Data structure to keep results
#Folder with training data
folder <- "C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//data//DataPoints_1K-3K-9K//";
#folder <- "//DataPoints_1K-3K-9K//";
# CONTROL CODE   ------------------------------------------------------------
model.name <- c("Linear","Discontinuous","Saturating","ALL")[1];
method.name <- c("GBM","XGBoost","LigthGBM")[1];
dataset.name.list <- generateDataSetNames(model.name, c("1K","3K","9K"),0);
results.df <- data.frame(matrix(data=NA,nrow=5,ncol=10));
colnames(results.df) <- c("Item","Utility_Type","Number_of_Trees","RMSE","R_Squared", "MAPD","User_Time","Sys_Time","Elapsed_Time","Leaf_Nodes");
results.line<-0;
#for(i in c(1:length(dataset.name.list))){
for(interaction in c(1,2,3,4,5,6,7,8,9,10)){#},10,50,100)){
results.line <- results.line+1;
fileName <- paste0(folder,dataset.name.list[3],".csv");
data.df <- loadData(fileName);
#data_all <- read.csv(fileName,header = TRUE,sep=",");
features.df <- prepareFeatures(data.df,"ALL");
#Extract training ad validation sets
totalData.size <- dim(features.df)[1];
training.size <- trunc(totalData.size * 0.7);
startTestIndex <- totalData.size - training.size;
training.df <- as.data.frame(features.df[1:training.size,]);
validation.df <-as.data.frame(features.df[startTestIndex:totalData.size,]);
#Train model
outcome.list <- trainGBM(training.df,interaction,numberOfTrees=5000,kfolds=10);
#Validate model
results.df <- validateGBM(outcome.list,validation.df,dataset.name.list,results.line,results.df,interaction);
}
#print(results.df); #show on the console
message <- resultsToFile(results.df,model.name,method.name,"_70-30_NOFeatureSelection.csv"); #save to a .csv file
print(message);
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//loadData.R");
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//xboostRegression.R");
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//gbmRegression.R");
#Data structure to keep results
#Folder with training data
folder <- "C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//data//DataPoints_1K-3K-9K//";
#folder <- "//DataPoints_1K-3K-9K//";
# CONTROL CODE   ------------------------------------------------------------
model.name <- c("Linear","Discontinuous","Saturating","ALL")[1];
method.name <- c("GBM","XGBoost","LigthGBM")[1];
dataset.name.list <- generateDataSetNames(model.name, c("1K","3K","9K"),0);
results.df <- data.frame(matrix(data=NA,nrow=10,ncol=9));
colnames(results.df) <- c("Item","Utility_Type","Number_of_Trees","RMSE","R_Squared", "MAPD","User_Time","Sys_Time","Elapsed_Time");
results.line<-0;
#for(i in c(1:length(dataset.name.list))){
for(interaction in c(1,2,3,4,5,6,7,8,9,10)){#},10,50,100)){
results.line <- results.line+1;
fileName <- paste0(folder,dataset.name.list[3],".csv");
data.df <- loadData(fileName);
#data_all <- read.csv(fileName,header = TRUE,sep=",");
features.df <- prepareFeatures(data.df,"ALL");
#Extract training ad validation sets
totalData.size <- dim(features.df)[1];
training.size <- trunc(totalData.size * 0.7);
startTestIndex <- totalData.size - training.size;
training.df <- as.data.frame(features.df[1:training.size,]);
validation.df <-as.data.frame(features.df[startTestIndex:totalData.size,]);
#Train model
outcome.list <- trainGBM(training.df,interaction,numberOfTrees=5000,kfolds=10);
#Validate model
results.df <- validateGBM(outcome.list,validation.df,dataset.name.list,results.line,results.df,interaction);
}
#print(results.df); #show on the console
message <- resultsToFile(results.df,model.name,method.name,"_70-30_NOFeatureSelection.csv"); #save to a .csv file
print(message);
library(devtools)
library(xgboost)
library(gbm)
library(r2pmml) #https://github.com/jpmml/r2pmml
# Initialization section ------------------------------------------------------
#Load utility functions
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//loadData.R");
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//xboostRegression.R");
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//gbmRegression.R");
#Data structure to keep results
#Folder with training data
folder <- "C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//data//DataPoints_1K-3K-9K//";
#folder <- "//DataPoints_1K-3K-9K//";
# CONTROL CODE   ------------------------------------------------------------
model.name <- c("Linear","Discontinuous","Saturating","ALL")[1];
method.name <- c("GBM","XGBoost","LigthGBM")[1];
dataset.name.list <- generateDataSetNames(model.name, c("1K","3K","9K"),0);
results.df <- data.frame(matrix(data=NA,nrow=10,ncol=9));
colnames(results.df) <- c("Item","Utility_Type","Number_of_Trees","RMSE","R_Squared", "MAPD","User_Time","Sys_Time","Elapsed_Time");
results.line<-0;
#for(i in c(1:length(dataset.name.list))){
for(interaction in c(1,2,3,4,5,6,7,8,9,10)){#},10,50,100)){
results.line <- results.line+1;
fileName <- paste0(folder,dataset.name.list[3],".csv");
data.df <- loadData(fileName);
#data_all <- read.csv(fileName,header = TRUE,sep=",");
features.df <- prepareFeatures(data.df,"ALL");
#Extract training ad validation sets
totalData.size <- dim(features.df)[1];
training.size <- trunc(totalData.size * 0.7);
startTestIndex <- totalData.size - training.size;
training.df <- as.data.frame(features.df[1:training.size,]);
validation.df <-as.data.frame(features.df[startTestIndex:totalData.size,]);
#Train model
outcome.list <- trainGBM(training.df,interaction,numberOfTrees=5000,kfolds=10);
#Validate model
results.df <- validateGBM(outcome.list,validation.df,dataset.name.list,results.line,results.df,interaction);
}
#print(results.df); #show on the console
message <- resultsToFile(results.df,model.name,method.name,"_70-30_NOFeatureSelection.csv"); #save to a .csv file
print(message);
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//loadData.R");
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//xboostRegression.R");
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//gbmRegression.R");
#Data structure to keep results
#Folder with training data
folder <- "C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//data//DataPoints_1K-3K-9K//";
#folder <- "//DataPoints_1K-3K-9K//";
# CONTROL CODE   ------------------------------------------------------------
model.name <- c("Linear","Discontinuous","Saturating","ALL")[4];
method.name <- c("GBM","XGBoost","LigthGBM")[1];
dataset.name.list <- generateDataSetNames(model.name, c("1K","3K","9K"),0);
results.df <- data.frame(matrix(data=NA,nrow=10,ncol=9));
colnames(results.df) <- c("Item","Utility_Type","Number_of_Interactions","RMSE","R_Squared", "MAPD","User_Time","Sys_Time","Elapsed_Time");
results.line<-0;
#for(i in c(1:length(dataset.name.list))){
for(interaction in c(1,3,5,7,9,13,15,17,19,21)){#},10,50,100)){
results.line <- results.line+1;
fileName <- paste0(folder,dataset.name.list[3],".csv");
data.df <- loadData(fileName);
#data_all <- read.csv(fileName,header = TRUE,sep=",");
features.df <- prepareFeatures(data.df,"ALL");
#Extract training ad validation sets
totalData.size <- dim(features.df)[1];
training.size <- trunc(totalData.size * 0.7);
startTestIndex <- totalData.size - training.size;
training.df <- as.data.frame(features.df[1:training.size,]);
validation.df <-as.data.frame(features.df[startTestIndex:totalData.size,]);
#Train model
outcome.list <- trainGBM(training.df,interaction,numberOfTrees=5000,kfolds=10);
#Validate model
results.df <- validateGBM(outcome.list,validation.df,dataset.name.list,results.line,results.df,interaction);
}
#print(results.df); #show on the console
message <- resultsToFile(results.df,model.name,method.name,"_70-30_NOFeatureSelection.csv"); #save to a .csv file
print(message);
1/1000
#Load utility functions
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//loadData.R");
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//xboostRegression.R");
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//gbmRegression.R");
#Data structure to keep results
#Folder with training data
folder <- "C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//data//DataPoints_1K-3K-9K//";
#folder <- "//DataPoints_1K-3K-9K//";
# CONTROL CODE   ------------------------------------------------------------
model.name <- c("Linear","Discontinuous","Saturating","ALL")[4];
method.name <- c("GBM","XGBoost","LigthGBM")[1];
dataset.name.list <- generateDataSetNames(model.name, c("1K","3K","9K"),0);
results.df <- data.frame(matrix(data=NA,nrow=10,ncol=9));
colnames(results.df) <- c("Item","Utility_Type","Learning_Step","RMSE","R_Squared", "MAPD","User_Time","Sys_Time","Elapsed_Time");
results.line<-0;
#for(i in c(1:length(dataset.name.list))){
for(step in c(1)){#},10,100,1000,10000)){#},10,50,100)){
step <- step/10000;
results.line <- results.line+1;
fileName <- paste0(folder,dataset.name.list[3],".csv");
data.df <- loadData(fileName);
#data_all <- read.csv(fileName,header = TRUE,sep=",");
features.df <- prepareFeatures(data.df,"ALL");
#Extract training ad validation sets
totalData.size <- dim(features.df)[1];
training.size <- trunc(totalData.size * 0.7);
startTestIndex <- totalData.size - training.size;
training.df <- as.data.frame(features.df[1:training.size,]);
validation.df <-as.data.frame(features.df[startTestIndex:totalData.size,]);
#Train model
outcome.list <- trainGBM(training.df,step,numberOfTrees=5000,kfolds=10);
#Validate model
results.df <- validateGBM(outcome.list,validation.df,dataset.name.list,results.line,results.df,step);
}
#print(results.df); #show on the console
message <- resultsToFile(results.df,model.name,method.name,"_70-30_NOFeatureSelection.csv"); #save to a .csv file
print(message);
message <- resultsToFile(results.df,model.name,method.name,"_70-30_NOFeatureSelection.csv"); #save to a .csv file
print(message);
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//loadData.R");
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//xboostRegression.R");
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//gbmRegression.R");
#Data structure to keep results
#Folder with training data
folder <- "C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//data//DataPoints_1K-3K-9K//";
#folder <- "//DataPoints_1K-3K-9K//";
# CONTROL CODE   ------------------------------------------------------------
model.name <- c("Linear","Discontinuous","Saturating","ALL")[4];
method.name <- c("GBM","XGBoost","LigthGBM")[1];
dataset.name.list <- generateDataSetNames(model.name, c("1K","3K","9K"),0);
results.df <- data.frame(matrix(data=NA,nrow=10,ncol=9));
colnames(results.df) <- c("Item","Utility_Type","Learning_Step","RMSE","R_Squared", "MAPD","User_Time","Sys_Time","Elapsed_Time");
results.line<-0;
#for(i in c(1:length(dataset.name.list))){
for(step in c(1,10,100,1000,10000)){#},10,50,100)){
step <- step/10000;
results.line <- results.line+1;
fileName <- paste0(folder,dataset.name.list[3],".csv");
data.df <- loadData(fileName);
#data_all <- read.csv(fileName,header = TRUE,sep=",");
features.df <- prepareFeatures(data.df,"ALL");
#Extract training ad validation sets
totalData.size <- dim(features.df)[1];
training.size <- trunc(totalData.size * 0.7);
startTestIndex <- totalData.size - training.size;
training.df <- as.data.frame(features.df[1:training.size,]);
validation.df <-as.data.frame(features.df[startTestIndex:totalData.size,]);
#Train model
outcome.list <- trainGBM(training.df,step,numberOfTrees=5000,kfolds=10);
#Validate model
results.df <- validateGBM(outcome.list,validation.df,dataset.name.list,results.line,results.df,step);
}
#print(results.df); #show on the console
message <- resultsToFile(results.df,model.name,method.name,"_70-30_NOFeatureSelection.csv"); #save to a .csv file
print(message);
2^2
#Load utility functions
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//loadData.R");
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//xboostRegression.R");
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//gbmRegression.R");
#Data structure to keep results
#Folder with training data
folder <- "C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//data//DataPoints_1K-3K-9K//";
#folder <- "//DataPoints_1K-3K-9K//";
# CONTROL CODE   ------------------------------------------------------------
model.name <- c("Linear","Discontinuous","Saturating","ALL")[1];
method.name <- c("GBM","XGBoost","LigthGBM")[1];
dataset.name.list <- generateDataSetNames(model.name, c("1K","3K","9K"),0);
results.df <- data.frame(matrix(data=NA,nrow=3,ncol=8));
colnames(results.df) <- c("Item","Utility_Type","RMSE","R_Squared", "MAPD","User_Time","Sys_Time","Elapsed_Time");
for(i in c(1:length(dataset.name.list))){
fileName <- paste0(folder,dataset.name.list[i],".csv");
data.df <- loadData(fileName);
#data_all <- read.csv(fileName,header = TRUE,sep=",");
features.df <- prepareFeatures(data.df,"ALL");
#Extract training ad validation sets
totalData.size <- dim(features.df)[1];
training.size <- trunc(totalData.size * 0.7);
startTestIndex <- totalData.size - training.size;
training.df <- as.data.frame(features.df[1:training.size,]);
validation.df <-as.data.frame(features.df[startTestIndex:totalData.size,]);
#Train model
outcome.list <- trainGBM(training.df,numberOfTrees=15000,kfolds=10);
#Validate model
results.df <- validateGBM(outcome.list,validation.df,dataset.name.list,i,results.df);
}
#print(results.df); #show on the console
message <- resultsToFile(results.df,model.name,method.name,"_70-30_NOFeatureSelection.csv"); #save to a .csv file
print(message);
#Load utility functions
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//loadData.R");
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//xboostRegression.R");
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//gbmRegression.R");
#Data structure to keep results
#Folder with training data
folder <- "C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//data//DataPoints_1K-3K-9K//";
#folder <- "//DataPoints_1K-3K-9K//";
# CONTROL CODE   ------------------------------------------------------------
model.name <- c("Linear","Discontinuous","Saturating","ALL")[2];
method.name <- c("GBM","XGBoost","LigthGBM")[1];
dataset.name.list <- generateDataSetNames(model.name, c("1K","3K","9K"),0);
results.df <- data.frame(matrix(data=NA,nrow=3,ncol=8));
colnames(results.df) <- c("Item","Utility_Type","RMSE","R_Squared", "MAPD","User_Time","Sys_Time","Elapsed_Time");
for(i in c(1:length(dataset.name.list))){
fileName <- paste0(folder,dataset.name.list[i],".csv");
data.df <- loadData(fileName);
#data_all <- read.csv(fileName,header = TRUE,sep=",");
features.df <- prepareFeatures(data.df,"ALL");
#Extract training ad validation sets
totalData.size <- dim(features.df)[1];
training.size <- trunc(totalData.size * 0.7);
startTestIndex <- totalData.size - training.size;
training.df <- as.data.frame(features.df[1:training.size,]);
validation.df <-as.data.frame(features.df[startTestIndex:totalData.size,]);
#Train model
outcome.list <- trainGBM(training.df,numberOfTrees=15000,kfolds=10);
#Validate model
results.df <- validateGBM(outcome.list,validation.df,dataset.name.list,i,results.df);
}
#print(results.df); #show on the console
message <- resultsToFile(results.df,model.name,method.name,"_70-30_NOFeatureSelection.csv"); #save to a .csv file
print(message);
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//loadData.R");
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//xboostRegression.R");
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//gbmRegression.R");
#Data structure to keep results
#Folder with training data
folder <- "C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//data//DataPoints_1K-3K-9K//";
#folder <- "//DataPoints_1K-3K-9K//";
# CONTROL CODE   ------------------------------------------------------------
model.name <- c("Linear","Discontinuous","Saturating","ALL")[3];
method.name <- c("GBM","XGBoost","LigthGBM")[1];
dataset.name.list <- generateDataSetNames(model.name, c("1K","3K","9K"),0);
results.df <- data.frame(matrix(data=NA,nrow=3,ncol=8));
colnames(results.df) <- c("Item","Utility_Type","RMSE","R_Squared", "MAPD","User_Time","Sys_Time","Elapsed_Time","Number_of_Trees");
for(i in c(1:length(dataset.name.list))){
fileName <- paste0(folder,dataset.name.list[i],".csv");
data.df <- loadData(fileName);
#data_all <- read.csv(fileName,header = TRUE,sep=",");
features.df <- prepareFeatures(data.df,"ALL");
#Extract training ad validation sets
totalData.size <- dim(features.df)[1];
training.size <- trunc(totalData.size * 0.7);
startTestIndex <- totalData.size - training.size;
training.df <- as.data.frame(features.df[1:training.size,]);
validation.df <-as.data.frame(features.df[startTestIndex:totalData.size,]);
#Train model
outcome.list <- trainGBM(training.df,numberOfTrees=15000,kfolds=10);
#Validate model
results.df <- validateGBM(outcome.list,validation.df,dataset.name.list,i,results.df);
}
#print(results.df); #show on the console
message <- resultsToFile(results.df,model.name,method.name,"_70-30_NOFeatureSelection.csv"); #save to a .csv file
print(message);
#Load utility functions
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//loadData.R");
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//xboostRegression.R");
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//gbmRegression.R");
#Data structure to keep results
#Folder with training data
folder <- "C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//data//DataPoints_1K-3K-9K//";
#folder <- "//DataPoints_1K-3K-9K//";
# CONTROL CODE   ------------------------------------------------------------
model.name <- c("Linear","Discontinuous","Saturating","ALL")[4];
method.name <- c("GBM","XGBoost","LigthGBM")[1];
dataset.name.list <- generateDataSetNames(model.name, c("1K","3K","9K"),0);
results.df <- data.frame(matrix(data=NA,nrow=3,ncol=9));
colnames(results.df) <- c("Item","Utility_Type","RMSE","R_Squared", "MAPD","User_Time","Sys_Time","Elapsed_Time","Number_of_Trees");
for(i in c(1:length(dataset.name.list))){
fileName <- paste0(folder,dataset.name.list[i],".csv");
data.df <- loadData(fileName);
#data_all <- read.csv(fileName,header = TRUE,sep=",");
features.df <- prepareFeatures(data.df,"ALL");
#Extract training ad validation sets
totalData.size <- dim(features.df)[1];
training.size <- trunc(totalData.size * 0.7);
startTestIndex <- totalData.size - training.size;
training.df <- as.data.frame(features.df[1:training.size,]);
validation.df <-as.data.frame(features.df[startTestIndex:totalData.size,]);
#Train model
outcome.list <- trainGBM(training.df,numberOfTrees=15000,kfolds=10);
#Validate model
results.df <- validateGBM(outcome.list,validation.df,dataset.name.list,i,results.df);
}
#print(results.df); #show on the console
message <- resultsToFile(results.df,model.name,method.name,"_70-30_NOFeatureSelection.csv"); #save to a .csv file
print(message);
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//loadData.R");
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//xboostRegression.R");
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//gbmRegression.R");
#Data structure to keep results
#Folder with training data
folder <- "C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//data//DataPoints_1K-3K-9K//";
#folder <- "//DataPoints_1K-3K-9K//";
# CONTROL CODE   ------------------------------------------------------------
model.name <- c("Linear","Discontinuous","Saturating","ALL")[1];
method.name <- c("GBM","XGBoost","LigthGBM")[1];
dataset.name.list <- generateDataSetNames(model.name, c("1K","3K","9K"),0);
results.df <- data.frame(matrix(data=NA,nrow=3,ncol=9));
colnames(results.df) <- c("Item","Utility_Type","RMSE","R_Squared", "MAPD","User_Time","Sys_Time","Elapsed_Time","Number_of_Trees");
i <- 3
fileName <- paste0(folder,dataset.name.list[i],".csv");
data.df <- loadData(fileName);
#data_all <- read.csv(fileName,header = TRUE,sep=",");
features.df <- prepareFeatures(data.df,"ALL");
#Extract training ad validation sets
totalData.size <- dim(features.df)[1];
training.size <- trunc(totalData.size * 0.7);
startTestIndex <- totalData.size - training.size;
training.df <- as.data.frame(features.df[1:training.size,]);
validation.df <-as.data.frame(features.df[startTestIndex:totalData.size,]);
#Train model
outcome.list <- trainGBM(training.df,numberOfTrees=15000,kfolds=10);
#Validate model
results.df <- validateGBM(outcome.list,validation.df,dataset.name.list,i,results.df);
message <- resultsToFile(results.df,model.name,method.name,"_70-30_NOFeatureSelection.csv"); #save to a .csv file
print(message);
pmmlFileName <- paste0(".//pmml///",dataset.name.list[i],"-",method.name,".pmml");
generatePMML(outcome.list[[1]],training.df,pmmlFileName,numberOfTrees);#datasetName[length(datasetName)]);
generatePMML(outcome.list[[1]],training.df,pmmlFileName,714);#datasetName[length(datasetName)]);
generatePMML <- function(trained.model, training.df, pmmlFileName, numberOfTrees){
browser();
last.column.explanatory <- dim(training.df)[2] - 1; #last column is the target variable
# Generate feature map
feature.map = r2pmml::genFMap(training.df[1:last.column.explanatory])
r2pmml::writeFMap(feature.map, "feature.map")
# Save the model in XGBoost proprietary binary format
#xgb.save(model, "xgboost.model")
# Dump the model in text format
#  xgb.dump(model, "xgboost.model.txt", fmap = "feature.map");
r2pmml(trained.model, pmmlFileName, fmap = feature.map, response_name = "UTILITY_INCREASE",
missing = NULL, ntreelimit = numberOfTrees, compact = TRUE)
}
generatePMML(outcome.list[[1]],training.df,pmmlFileName,714);#datasetName[length(datasetName)]);
View(feature.map)
View(feature.map)
View(feature.map)
View(training.df)
generatePMML(outcome.list[[1]],training.df,pmmlFileName,15000);#datasetName[length(datasetName)]);
#for gbm
r2pmml(trained.model, pmmlFileName, fmap = feature.map, response_name = "UTILITY_INCREASE",
missing = NULL, compact = TRUE)
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//loadData.R");
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//xboostRegression.R");
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//gbmRegression.R");
#Data structure to keep results
#Folder with training data
folder <- "C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//data//DataPoints_1K-3K-9K//";
#folder <- "//DataPoints_1K-3K-9K//";
# CONTROL CODE   ------------------------------------------------------------
model.name <- c("Linear","Discontinuous","Saturating","ALL")[1];
method.name <- c("GBM","XGBoost","LigthGBM")[1];
dataset.name.list <- generateDataSetNames(model.name, c("1K","3K","9K"),0);
results.df <- data.frame(matrix(data=NA,nrow=3,ncol=9));
colnames(results.df) <- c("Item","Utility_Type","RMSE","R_Squared", "MAPD","User_Time","Sys_Time","Elapsed_Time","Number_of_Trees");
#for(i in c(1:length(dataset.name.list))){
i <- 1
fileName <- paste0(folder,dataset.name.list[i],".csv");
data.df <- loadData(fileName);
#data_all <- read.csv(fileName,header = TRUE,sep=",");
features.df <- prepareFeatures(data.df,"ALL");
#Extract training ad validation sets
totalData.size <- dim(features.df)[1];
training.size <- trunc(totalData.size * 0.7);
startTestIndex <- totalData.size - training.size;
training.df <- as.data.frame(features.df[1:training.size,]);
validation.df <-as.data.frame(features.df[startTestIndex:totalData.size,]);
#Train model
outcome.list <- trainGBM(training.df,numberOfTrees=5000,kfolds=10);
#Validate model
results.df <- validateGBM(outcome.list,validation.df,dataset.name.list,i,results.df);
library(devtools)
library(xgboost)
library(gbm)
library(r2pmml) #https://github.com/jpmml/r2pmml
# Initialization section ------------------------------------------------------
#Load utility functions
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//loadData.R");
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//xboostRegression.R");
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//gbmRegression.R");
#Data structure to keep results
#Folder with training data
folder <- "C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//data//DataPoints_1K-3K-9K//";
#folder <- "//DataPoints_1K-3K-9K//";
# CONTROL CODE   ------------------------------------------------------------
model.name <- c("Linear","Discontinuous","Saturating","ALL")[1];
method.name <- c("GBM","XGBoost","LigthGBM")[1];
dataset.name.list <- generateDataSetNames(model.name, c("1K","3K","9K"),0);
results.df <- data.frame(matrix(data=NA,nrow=3,ncol=9));
colnames(results.df) <- c("Item","Utility_Type","RMSE","R_Squared", "MAPD","User_Time","Sys_Time","Elapsed_Time","Number_of_Trees");
#Load utility functions
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//loadData.R");
source('~/GitHub/ML_SelfHealingUtility/mainControl.R', echo=TRUE)
