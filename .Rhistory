ggtitle(title) +
theme(plot.title = element_text(size = 12))+
labs(y="question count", x=paste(profession," workers per question"));
multiplot(p1,p2,p3,p4,p5,cols=2)
View(summaryTable)
?unique
unique(summaryTable$Question.ID)
summaryTable$
questionIDList<-unique(summaryTable$Question.ID);
for(id in questionIDList){
print(id)
}
summaryTable$
questionIDList<-unique(summaryTable$Question.ID);
questionIDList
summaryTable$
questionIDList["ID"]<-unique(summaryTable$Question.ID);
summaryTable$
questionIDList["ID"]<-data.frame(unique(summaryTable$Question.ID));
summaryTable$
questionIDList<-data.frame(unique(summaryTable$Question.ID));
questionIDList
summaryTable$
questionIDList<-data.frame(unique(summaryTable$Question.ID));
questionIDList<-data.frame(unique(summaryTable$Question.ID));
questionIDList
colnames(questionIDList)<-c("ID");
for(id in questionIDList$ID){
print(id)
}
View(summaryTable)
View(summaryTable)
head(dataf)
subset_df<-subset(dataf,select=c(Answer.confidence))
#mark all rows that match the selection
confidence_1_count<- rowSums(subset_df==1);
subset_df["1"] <- confidence_1_count;
confidence_2_count<- rowSums(subset_df==2);
subset_df["2"] <- confidence_2_count;
confidence_3_count<- rowSums(subset_df==3);
subset_df["3"] <- confidence_3_count;
confidence_4_count<- rowSums(subset_df==4);
subset_df["4"] <- confidence_4_count;
confidence_5_count<- rowSums(subset_df==5);
subset_df["5"] <- confidence_5_count;
subset_df["QuestionID"] <- dataf$Question.ID;
subset_df <-subset(subset_df,select= c(QuestionID,confidence_1_count,confidence_2_count,confidence_3_count,confidence_4_count,confidence_5_count));
question_by <- group_by(subset_df,QuestionID);
summaryTable<- summarize(question_by,Total_1 = sum(confidence_1_count),Total_2 = sum(confidence_2_count),
TotalIDK = sum(confidence_3_count), Total_4=sum(confidence_4_count),
Total_5 = sum(confidence_5_count));
colnames(summaryTable)<-c("Question.ID","conf.1","conf.2","conf.3","conf.4","conf.5");
library(dplyr);
subset_df<-subset(dataf,select=c(Answer.confidence))
confidence_1_count<- rowSums(subset_df==1);
subset_df["1"] <- confidence_1_count;
confidence_2_count<- rowSums(subset_df==2);
subset_df["2"] <- confidence_2_count;
confidence_3_count<- rowSums(subset_df==3);
subset_df["3"] <- confidence_3_count;
confidence_4_count<- rowSums(subset_df==4);
subset_df["4"] <- confidence_4_count;
confidence_5_count<- rowSums(subset_df==5);
subset_df["5"] <- confidence_5_count;
subset_df["QuestionID"] <- dataf$Question.ID;
subset_df <-subset(subset_df,select= c(QuestionID,confidence_1_count,confidence_2_count,confidence_3_count,confidence_4_count,confidence_5_count));
question_by <- group_by(subset_df,QuestionID);
summaryTable<- summarize(question_by,Total_1 = sum(confidence_1_count),Total_2 = sum(confidence_2_count),
TotalIDK = sum(confidence_3_count), Total_4=sum(confidence_4_count),
Total_5 = sum(confidence_5_count));
colnames(summaryTable)<-c("Question.ID","conf.1","conf.2","conf.3","conf.4","conf.5");
View(summaryTable)
subset_df<-subset(dataf,select=c(Answer.confidence))
confidence_1_count<- rowSums(subset_df==1);
confidence_1_count
subset_df["1"] <- confidence_1_count;
subset_df
confidence_2_count<- rowSums(subset_df==2);
subset_df["2"] <- confidence_2_count;
head(subset_df)
confidence_3_count<- rowSums(subset_df==3);
subset_df["3"] <- confidence_3_count;
confidence_4_count<- rowSums(subset_df==4);
subset_df["4"] <- confidence_4_count;
confidence_5_count<- rowSums(subset_df==5);
subset_df["5"] <- confidence_5_count;
subset_df["QuestionID"] <- dataf$Question.ID;
head(subset_df)
subset_df <-subset(subset_df,select= c(QuestionID,confidence_1_count,confidence_2_count,
confidence_3_count,confidence_4_count,confidence_5_count));
question_by <- group_by(subset_df,QuestionID);
summaryTable<- summarize(question_by,
Total_1 = sum(confidence_1_count),Total_2 = sum(confidence_2_count),
Total_3 = sum(confidence_3_count), Total_4=sum(confidence_4_count),
Total_5 = sum(confidence_5_count));
colnames(summaryTable)<-c("Question.ID","conf.1","conf.2","conf.3","conf.4","conf.5");
head(summaryTable)
subset_df <-subset(subset_df,select= c(QuestionID,confidence_1_count,confidence_2_count,
confidence_3_count,confidence_4_count,confidence_5_count));
head(subset_df)
question_by <- group_by(subset_df,QuestionID);
head(question_by)
ubset_df <-subset(dataf,select= c(Answer.option));
subset_df <- data.frame(subset_df);
#mark all rows that match the selection
YesCount<- rowSums(subset_df=="YES");
subset_df["YesCount"] <- YesCount;
NoCount<- rowSums(subset_df=="NO");
subset_df["NoCount"] <- NoCount;
IDKCount<- rowSums(subset_df=="IDK");
subset_df["IDKCount"] <- IDKCount;
subset_df["QuestionID"] <- dataf$Question.ID;
subset_df <-subset(subset_df,select= c(QuestionID,YesCount,NoCount,IDKCount));
##Group by question ID, which means adding all the values from the parallel columns in order to have
#a sum for each questionID
question_by <- group_by(subset_df,QuestionID);
summaryTable<- summarize(question_by,TotalYes = sum(YesCount),TotalNo = sum(NoCount), TotalIDK = sum(IDKCount));
colnames(summaryTable)<-c("Question.ID","Yes.Count","No.Count","IDK.Count");
return(summaryTable);
subset_df <-subset(dataf,select= c(Answer.option));
subset_df <- data.frame(subset_df);
YesCount<- rowSums(subset_df=="YES");
subset_df["YesCount"] <- YesCount;
NoCount<- rowSums(subset_df=="NO");
subset_df["NoCount"] <- NoCount;
IDKCount<- rowSums(subset_df=="IDK");
subset_df["IDKCount"] <- IDKCount;
subset_df["QuestionID"] <- dataf$Question.ID;
subset_df <-subset(subset_df,select= c(QuestionID,YesCount,NoCount,IDKCount));
question_by <- group_by(subset_df,QuestionID);
summaryTable<- summarize(question_by,TotalYes = sum(YesCount),TotalNo = sum(NoCount), TotalIDK = sum(IDKCount));
colnames(summaryTable)<-c("Question.ID","Yes.Count","No.Count","IDK.Count");
head(summaryTable)
subset_df<-subset(dataf,select=c(Answer.confidence))
confidence_1_count<- rowSums(subset_df=="1");
subset_df["1"] <- confidence_1_count;
confidence_2_count<- rowSums(subset_df=="2");
subset_df["2"] <- confidence_2_count;
confidence_3_count<- rowSums(subset_df=="3");
subset_df["3"] <- confidence_3_count;
confidence_4_count<- rowSums(subset_df=="4");
subset_df["4"] <- confidence_4_count;
confidence_5_count<- rowSums(subset_df=="5");
subset_df["5"] <- confidence_5_count;
subset_df["QuestionID"] <- dataf$Question.ID;
subset_df <-subset(subset_df,select= c(QuestionID,confidence_1_count,confidence_2_count,
confidence_3_count,confidence_4_count,confidence_5_count));
question_by <- group_by(subset_df,QuestionID);
summaryTable<- summarize(question_by,
Total_1 = sum(confidence_1_count),Total_2 = sum(confidence_2_count),
Total_3 = sum(confidence_3_count), Total_4=sum(confidence_4_count),
Total_5 = sum(confidence_5_count));
colnames(summaryTable)<-c("Question.ID","conf.1","conf.2","conf.3","conf.4","conf.5");
dataf
subset_df <-subset(subset_df,select= c(QuestionID,1,2,3,4,5));
question_by <- group_by(subset_df,QuestionID);
summaryTable<- summarize(question_by,
Total_1 = sum(confidence_1_count),Total_2 = sum(confidence_2_count),
Total_3 = sum(confidence_3_count), Total_4=sum(confidence_4_count),
Total_5 = sum(confidence_5_count));
colnames(summaryTable)<-c("Question.ID","conf.1","conf.2","conf.3","conf.4","conf.5");
head(summaryTable)
subset_df<-subset(dataf,select=c(Answer.confidence))
subset_df<-subset(dataf,select=c(Answer.confidence))
#mark all rows that match the selection
confidence_1_count<- rowSums(subset_df=="1");
subset_df["conf.1"] <- confidence_1_count;
confidence_2_count<- rowSums(subset_df=="2");
subset_df["conf.2"] <- confidence_2_count;
confidence_3_count<- rowSums(subset_df=="3");
subset_df["conf.3"] <- confidence_3_count;
confidence_4_count<- rowSums(subset_df=="4");
subset_df["conf.4"] <- confidence_4_count;
confidence_5_count<- rowSums(subset_df=="5");
subset_df["conf.5"] <- confidence_5_count;
subset_df["QuestionID"] <- dataf$Question.ID;
subset_df <-subset(subset_df,select= c(QuestionID,conf.1,conf.2,conf.3,conf.4,conf.5));
question_by <- group_by(subset_df,QuestionID);
summaryTable<- summarize(question_by,
Total_1 = sum(confidence_1_count),Total_2 = sum(confidence_2_count),
Total_3 = sum(confidence_3_count), Total_4=sum(confidence_4_count),
Total_5 = sum(confidence_5_count));
colnames(summaryTable)<-c("Question.ID","conf.1","conf.2","conf.3","conf.4","conf.5");
subset_df<-subset(dataf,select=c(Answer.confidence))
confidence_1_count<- rowSums(subset_df=="1");
subset_df["conf.1"] <- confidence_1_count;
head(subset_df)
subset_df<-subset(dataf,select=c(Answer.confidence))
#mark all rows that match the selection
confidence_1_count<- rowSums(subset_df=="1");
subset_df["conf.1"] <- conf.1;
confidence_2_count<- rowSums(subset_df=="2");
subset_df["conf.2"] <- conf.2;
confidence_3_count<- rowSums(subset_df=="3");
subset_df["conf.3"] <- conf.3;
confidence_4_count<- rowSums(subset_df=="4");
subset_df["conf.4"] <- conf.4;
confidence_5_count<- rowSums(subset_df=="5");
subset_df["conf.5"] <- conf.5;
subset_df["QuestionID"] <- dataf$Question.ID;
subset_df<-subset(dataf,select=c(Answer.confidence))
confidence_1_count<- rowSums(subset_df=="1");
subset_df<-subset(dataf,select=c(Answer.confidence))
#mark all rows that match the selection
conf.1<- rowSums(subset_df=="1");
subset_df["conf.1"] <- conf.1;
conf.2<- rowSums(subset_df=="2");
subset_df["conf.2"] <- conf.2;
conf.3<- rowSums(subset_df=="3");
subset_df["conf.3"] <- conf.3;
conf.4<- rowSums(subset_df=="4");
subset_df["conf.4"] <- conf.4;
conf.5<- rowSums(subset_df=="5");
subset_df["conf.5"] <- conf.5;
subset_df["QuestionID"] <- dataf$Question.ID;
subset_df <-subset(subset_df,select= c(QuestionID,conf.1,conf.2,conf.3,conf.4,conf.5));
question_by <- group_by(subset_df,QuestionID);
summaryTable<- summarize(question_by,
Total_1 = sum(conf.1),Total_2 = sum(conf.2),
Total_3 = sum(conf.3), Total_4=sum(conf.4),
Total_5 = sum(conf.5));
colnames(summaryTable)<-c("Question.ID","conf.1","conf.2","conf.3","conf.4","conf.5");
summaryTable["utility"]<-summaryTable$conf.1+2*summaryTable$conf.2+3*summaryTable$conf.3+4*summaryTable$conf.4+5*summmaryTable$conf.5;
summaryTable["utility"]<-summaryTable$conf.1+2*summaryTable$conf.2+3*summaryTable$conf.3+
4*summaryTable$conf.4+5*summaryTable$conf.5;
questionID_f <- data.frame(unique(dataf$Question.ID));
colnames(questionID_f)<- c("id");
questionSet<-dataf[dataf$Session.ID=id]
questionSet<-dataf[dataf$Session.ID=id,]
questionSet<-dataf[dataf$Question.ID==id,]
head(questionSet)
head(questionSet$Question.ID
;
head(questionSet$Question.ID;
head(questionSet$Question.ID);
id=1;
questionSet<-dataf[dataf$Question.ID==id,]
sampled_df<- sample_n(questionSet, 5)
sampled_df
dim(sampled_df)
sampled_dataf<-data.frame();
questionID_f <- data.frame(unique(dataf$Question.ID));
colnames(questionID_f)<- c("id");
id=1;
questionSet<-dataf[dataf$Question.ID==id,]
sampled_df<- sample_n(questionSet, 5)
sampled_dataf<-rbind(sampled_dataf,sampled_df);
sampled_dataf
id=2;
questionSet<-dataf[dataf$Question.ID==id,]
sampled_df<- sample_n(questionSet, 5)
sampled_dataf<-rbind(sampled_dataf,sampled_df);
sampled_dataf
dim(sampled_dataf)
sampled_dataf<-data.frame();
questionID_f <- data.frame(unique(dataf$Question.ID));
colnames(questionID_f)<- c("id");
for(id in questionID_f$id){
questionSet<-dataf[dataf$Question.ID==id,]
sampled_df<- sample_n(questionSet, 5)
sampled_dataf<-rbind(sampled_dataf,sampled_df);
}
dim(sampled_dataf)
confidence_utility<-function(df){
subset_df<-subset(df,select=c(Answer.confidence))
#mark all rows that match the selection
conf.1<- rowSums(subset_df=="1");
subset_df["conf.1"] <- conf.1;
conf.2<- rowSums(subset_df=="2");
subset_df["conf.2"] <- conf.2;
conf.3<- rowSums(subset_df=="3");
subset_df["conf.3"] <- conf.3;
conf.4<- rowSums(subset_df=="4");
subset_df["conf.4"] <- conf.4;
conf.5<- rowSums(subset_df=="5");
subset_df["conf.5"] <- conf.5;
subset_df["QuestionID"] <- df$Question.ID;
subset_df <-subset(subset_df,select= c(QuestionID,conf.1,conf.2,conf.3,conf.4,conf.5));
question_by <- group_by(subset_df,QuestionID);
summaryTable<- summarize(question_by,
Total_1 = sum(conf.1),Total_2 = sum(conf.2),
Total_3 = sum(conf.3),Total_4=sum(conf.4),
Total_5 = sum(conf.5));
colnames(summaryTable)<-c("Question.ID","conf.1","conf.2","conf.3","conf.4","conf.5");
summaryTable["utility"]<-summaryTable$conf.1+2*summaryTable$conf.2+3*summaryTable$conf.3+
4*summaryTable$conf.4+5*summaryTable$conf.5;
}
confidence_utility<-function(df){
subset_df<-subset(df,select=c(Answer.confidence))
#mark all rows that match the selection
conf.1<- rowSums(subset_df=="1");
subset_df["conf.1"] <- conf.1;
conf.2<- rowSums(subset_df=="2");
subset_df["conf.2"] <- conf.2;
conf.3<- rowSums(subset_df=="3");
subset_df["conf.3"] <- conf.3;
conf.4<- rowSums(subset_df=="4");
subset_df["conf.4"] <- conf.4;
conf.5<- rowSums(subset_df=="5");
subset_df["conf.5"] <- conf.5;
subset_df["QuestionID"] <- df$Question.ID;
subset_df <-subset(subset_df,select= c(QuestionID,conf.1,conf.2,conf.3,conf.4,conf.5));
question_by <- group_by(subset_df,QuestionID);
summaryTable<- summarize(question_by,
Total_1 = sum(conf.1),Total_2 = sum(conf.2),
Total_3 = sum(conf.3),Total_4=sum(conf.4),
Total_5 = sum(conf.5));
colnames(summaryTable)<-c("Question.ID","conf.1","conf.2","conf.3","conf.4","conf.5");
summaryTable["utility"]<-summaryTable$conf.1+2*summaryTable$conf.2+3*summaryTable$conf.3+
4*summaryTable$conf.4+5*summaryTable$conf.5;
return(summaryTable);
}
utility_table<-confidence_utility(df=sampled_dataf);
?sort
utility_table<-sort(utility_table,utility_table$utility,decreasing = TRUE);
utility_table<-data.frame(sort(utility_table,utility_table$utility,decreasing = TRUE));
sort(utility_table,utility_table$utility,decreasing = TRUE)
utility_table<-utility_table[order(utility_table$utility),];
head(utility_table)
utility_table<-utility_table[order(utility_table$utility, decreasing = TRUE),];
head(utility_table)
topQuestions<-utility_table[1:5,];
topQuestions
sampleAnswers<- function(questionList, answers_df){
sampled_dataf<-data.frame();
questionID_f <- data.frame(unique(answers_df$Question.ID));
colnames(questionID_f)<- c("id");
for(id in questionID_f$id){
questionSet<-answers_df[answers_df$Question.ID==id,]
sampled_df<- sample_n(questionSet, 5)
sampled_dataf<-rbind(sampled_dataf,sampled_df);
}
return(sampled_dataf);
}
view(answer_df)
View(answer_df)
View(dataf)
View(dataf)
source('C:/Users/chris/OneDrive/Documentos/GitHub/ML_VotingAggregation/aggregateVotes.R')
outcomes$precision <- 1
outcomes<- data.frame();
outcomes$precision <- 1
outcomes$precision <- 1
colnames(outcomes)<-c("precision","recall","sensibility","sensitivity","accuracy");
colnames(outcomes)<-c("precision","recall","sensibility","sensitivity","accuracy");
outcomes<- data.frame();
colnames(outcomes)<-c("precision","recall","sensibility","sensitivity","accuracy");
outcomes<- data.frame(1:5);
colnames(outcomes)<-c("precision","recall","sensibility","sensitivity","accuracy");
outcomes<- data.frame(c(1:5));
colnames(outcomes)<-c("precision","recall","sensibility","sensitivity","accuracy");
outcomes<- data.frame(c(1:5));
colnames(outcomes)<-c("precision","recall","sensibility","sensitivity","accuracy");
outcomes
matrix(1:5, ncol = 5, nrow = 1)
outcomes <- matrix(1:5, ncol = 5, nrow = 1)
colnames(outcomes)<-c("precision","recall","sensibility","sensitivity","accuracy");
outcomes
outcomes$precision <- 1
outcomes
outcomes<- matrix();
outcomes
colnames(outcomes)<-c("precision","recall","sensibility","sensitivity","accuracy");
colnames(outcomes)<-c("precision");
outcomes
outcomes$precision<-1
outcomes
outcomes<- data.frame(1;2;3;4;5);
outcomes<- list(precision=0, recall=0, sensibility=0, sensitivity=0, accuracy=0);
outcomesMatrix <- rbind(outcomesMatrix,outcomes);
outcomesf<-data.frame(outcomes);
accumOutcomes <- rbind(accumOutcomes,outcomesf);
accumOutcomes <- rbind(accumOutcomes,outcomesf);
accumOutcomes<- data.frame();
accumOutcomes <- rbind(outcomesf,outcomesf);
accumOutcomes<- list();
accumOutcomes <- rbind(accumOutcomes,outcomesf);
accumOutcomes
outcomes<- list(precision=1, recall=0, sensibility=0, sensitivity=0, accuracy=0);
outcomesf<-data.frame(outcomes);
accumOutcomes <- rbind(accumOutcomes,outcomesf);
accumOutcomes
data<- c(2:2.5,0.1)
data
data<- c(2:2.5)
data
?c
c(2:5)
start <- 2
end <- 2.5
data <- seq(a,b,sign(b-a)*0.5)
data <- seq(start,end,sign(b-a)*0.5)
data <- seq(start,end,sign(end-start)*0.5)
data
data <- seq(start,end,sign(end-start)*0.1)
data
logY <- log(data)
logY
x <- c(1:6)
x
plot(x=x,y=data)
plot(x=x,y=logY)
invLogY=1/logY
invData <- 1/data
plot(x=x,y=invData)
plot(x=x,y=invLogY)
plot(x=x,y=invData)
logY <- log2(data)
invLogY=1/logY
plot(x=x,y=invLogY)
library(caret);
library(car);
# load data
source("C://Users//chris//OneDrive//Documentos//GitHub//ML_SelfHealingUtility//loadData.R");
dataf<-loadData(fileName="Random_proper_comp_names.csv");
staticf<- loadData(fileName = "MLDATA2_STATIC.csv");
library(caret);
dataf<- dataf[dataf$RELIABILITY!=0,];
dataf <- dataf[dataf$UTILITY.INCREASE!=0,];
staticf<- staticf[staticf$RELIABILITY!=0,];
staticf<- staticf[staticf$UTILITY.INCREASE!=0,];
featuresf<-data.frame(dataf$CRITICALITY,
dataf$CONNECTIVITY,
dataf$RELIABILITY,
dataf$UTILITY.INCREASE);
validationf<-data.frame(staticf$CRITICALITY,
staticf$CONNECTIVITY,
staticf$RELIABILITY,
staticf$UTILITY.INCREASE);
colnames(featuresf) <- c("Criticality","Connectivity","Reliability","Utility");
colnames(validationf) <- c("Criticality","Connectivity","Reliability","Utility");
plot(featuresf);
title("Training");
plot(validationf);
title("Validation");
modelFit<- lm(log(Utility) ~ log(Criticality) + log(Connectivity)  ,data=featuresf);
summary(modelFit)
avPlots(modelFit)
modelFit<- lm(Utility ~ Criticality*Connectivity ,data=featuresf);
summary(modelFit)
avPlots(modelFit)
lmPredicted <- predict(modelFit, featuresf)
summary(modelFit)
lmPredicted
residual.modelFit<- resid(modelFit);
plot(x=featuresf$Criticality,y=residual.modelFit,
ylab="Residuals", xlab="Criticality",
main="Residual Plot Actual Utility minus Predicted Utility");
abline(0,0);
plot(x=featuresf$Criticality,y=featuresf$Utility);
points(featuresf$Criticality, lmPredicted, col = "red", pch=4,
abline(modelFit));
title("Linear Regression - actual (circles) vs predicted (crosses)");
plot(x=featuresf$Criticality,y=featuresf$Utility,
abline(modelFit),cex = 1.3, pch = 16);
title("Linear Regression - actual (circles) vs predicted (line)");
plot(x=featuresf$Connectivity,y=featuresf$Utility);
points(featuresf$Connectivity, lmPredicted, col = "red", pch=4);
title("Linear Regression - actual (circles) vs predicted (crosses)");
lmPredictedValidation <- predict(modelFit, validationf);
plot(x=validationf$Criticality,y=validationf$Utility);
points(validationf$Criticality, lmPredictedValidation, col = "red",
pch=4,abline(modelFit));
title("Linear Regression - actual (circles) vs predicted (crosses)");
error<- validationf$Utility - lmPredictedValidation # same as data$Y - predictedY
predictionRMSE <- rmse(error)
rmse <- function(error)
{
return (sqrt(mean(error^2)));
}
r
error<- validationf$Utility - lmPredictedValidation # same as data$Y - predictedY
predictionRMSE <- rmse(error)
predictionRMSE
modelFit<- lm(Utility ~ Criticality*Connectivity ,data=featuresf);
summary(modelFit)
avPlots(modelFit)
#validate models
lmPredicted <- predict(modelFit, featuresf)
summary(modelFit)
lmPredicted
residual.modelFit<- resid(modelFit);
plot(x=featuresf$Criticality,y=residual.modelFit,
ylab="Residuals", xlab="Criticality",
main="Residual Plot Actual Utility minus Predicted Utility");
abline(0,0);
#There is a non-random pattern in the residuals, which suggest a non-linear relationship.
plot(x=featuresf$Criticality,y=featuresf$Utility);
points(featuresf$Criticality, lmPredicted, col = "red", pch=4,
abline(modelFit));
title("Linear Regression - actual (circles) vs predicted (crosses)");
plot(x=featuresf$Criticality,y=featuresf$Utility,
abline(modelFit),cex = 1.3, pch = 16);
title("Linear Regression - actual (circles) vs predicted (line)");
plot(x=featuresf$Connectivity,y=featuresf$Utility);
points(featuresf$Connectivity, lmPredicted, col = "red", pch=4);
title("Linear Regression - actual (circles) vs predicted (crosses)");
#validate models
lmPredictedValidation <- predict(modelFit, validationf);
plot(x=validationf$Criticality,y=validationf$Utility);
points(validationf$Criticality, lmPredictedValidation, col = "red",
pch=4,abline(modelFit));
title("Linear Regression - actual (circles) vs predicted (crosses)");
#Compute Root Mean Square Error
rmse <- function(error)
{
return (sqrt(mean(error^2)));
}
error<- validationf$Utility - lmPredictedValidation # same as data$Y - predictedY
predictionRMSE <- rmse(error)
predictionRMSE
?knn.cv
