plot(x=featuresf$Criticality,y=featuresf$Utility);
abline(modelFit)
title("Linear Regression - actual (circles) vs predicted (crosses)");
abline(modelFit,cex = 1.3,pch = 16)
plot(x=featuresf$Criticality,y=featuresf$Utility);
abline(modelFit,cex = 1.3,pch = 16)
title("Linear Regression - actual (circles) vs predicted (crosses)");
?abline
plot(x=featuresf$Criticality,y=featuresf$Utility, abline(modelFit,cex = 1.3,pch = 16));
title("Linear Regression - actual (circles) vs predicted (line)");
residual.modelFit<- resid(modelFit)
residual.modelFit<- resid(modelFit)
plot(x=featuresf$Criticality,y=residual.modelFit,
+ yLab="Residuals", xLab="Criticality",
+ main="Residual Plot Actual Utility - Predicted Utility");
residual.modelFit<- resid(modelFit);
plot(x=featuresf$Criticality,y=residual.modelFit,
+ ylab="Residuals", xlab="Criticality",
+ main="Residual Plot Actual Utility - Predicted Utility");
residual.modelFit<- resid(modelFit);
plot(x=featuresf$Criticality,y=residual.modelFit,
+ ylab="Residuals", xlab="Criticality",
+ main="Residual Plot Actual Utility minus Predicted Utility");
plot(x=featuresf$Criticality,y=residual.modelFit)
abline(0,0);
plot(x=featuresf$Criticality,y=residual.modelFit,
ylab="Residuals", xlab="Criticality",
main="Residual Plot Actual Utility minus Predicted Utility");
abline(0,0);
modelFit<- lm(Utility ~ Connectivity*Connectivity + Reliability ,data=featuresf);
lmPredicted <- predict(modelFit, featuresf)
summary(modelFit)
residual.modelFit<- resid(modelFit);
plot(x=featuresf$Criticality,y=residual.modelFit,
ylab="Residuals", xlab="Criticality",
main="Residual Plot Actual Utility minus Predicted Utility");
abline(0,0);
plot(x=featuresf$Criticality,y=featuresf$Utility);
points(featuresf$Criticality, lmPredicted, col = "red", pch=4, abline(lmPredicted));
points(featuresf$Criticality, lmPredicted, col = "red", pch=4, abline(a=featuresf$Criticality,b=lmPredicted));
plot(x=featuresf$Criticality,y=featuresf$Utility);
points(featuresf$Criticality, lmPredicted, col = "red", pch=4,
abline(a=featuresf$Criticality,b=lmPredicted, pch=3));
modelFit<- lm(Utility ~ Connectivity*Connectivity + Reliability ,data=featuresf);
summary(modelFit)
modelFit<- lm(Utility ~ Connectivity ,data=featuresf);
summary(modelFit)
modelFit<- lm(Utility ~ Criticality ,data=featuresf);
summary(modelFit)
residual.modelFit<- resid(modelFit);
plot(x=featuresf$Criticality,y=residual.modelFit,
ylab="Residuals", xlab="Criticality",
main="Residual Plot Actual Utility minus Predicted Utility");
abline(0,0);
plot(x=featuresf$Criticality,y=featuresf$Utility);
points(featuresf$Criticality, lmPredicted, col = "red", pch=4,
abline(a=featuresf$Criticality,b=lmPredicted, pch=3));
modelFit<- lm(Utility ~ Criticality*Connectivity ,data=featuresf);
lmPredicted <- predict(modelFit, featuresf)
summary(modelFit)
residual.modelFit<- resid(modelFit);
plot(x=featuresf$Criticality,y=residual.modelFit,
ylab="Residuals", xlab="Criticality",
main="Residual Plot Actual Utility minus Predicted Utility");
abline(0,0);
plot(x=featuresf$Criticality,y=featuresf$Utility);
points(featuresf$Criticality, lmPredicted, col = "red", pch=4,
abline(a=featuresf$Criticality,b=lmPredicted, pch=3));
title("Linear Regression - actual (circles) vs predicted (crosses)");
plot(x=featuresf$Connectivity,y=featuresf$Utility);
points(featuresf$Connectivity, lmPredicted, col = "red", pch=4);
title("Linear Regression - actual (circles) vs predicted (crosses)");
modelFit<- lm(Utility ~ Criticality*Connectivity +Reliability ,data=featuresf);
lmPredicted <- predict(modelFit, featuresf)
lmPredicted
summary(modelFit)
residual.modelFit<- resid(modelFit);
plot(x=featuresf$Criticality,y=residual.modelFit,
ylab="Residuals", xlab="Criticality",
main="Residual Plot Actual Utility minus Predicted Utility");
abline(0,0);
plot(x=featuresf$Criticality,y=featuresf$Utility);
points(featuresf$Criticality, lmPredicted, col = "red", pch=4,
abline(modelFit));
modelFit<- lm(Utility ~ Criticality*Connectivity ,data=featuresf);
summary(modelFit)
plot(x=featuresf$Criticality,y=featuresf$Utility);
points(featuresf$Criticality, lmPredicted, col = "red", pch=4,
abline(modelFit));
title("Linear Regression - actual (circles) vs predicted (crosses)");
?avPlot
avPlot(modelFit,featuresf)
avPlot(modelFit,data=featuresf)
avPlot(lm(Utiity~Criticality*Connectivity),data=featuresf)
avPlot(lm(Utility~Criticality*Connectivity),data=featuresf)
avPlot(lm(Utility~Criticality*Connectivity),data=featuresf)
avPlot(modelFit,data=featuresf)
avPlot(modelFit,"Utility", data=featuresf)
avPlot(modelFit,Utility, data=featuresf)
avPlot(modelFit,variable=Utility, data=featuresf)
avPlot(modelFit,variable="Utility", data=featuresf)
modelFit
avPlot(modelFit,variable="Criticality", data=featuresf)
avPlot(modelFit,variable="Connectivity", data=featuresf)
avPlot(modelFit,variable="Connectivity")
avPlot(modelFit)
modelFit<- lm(Utility ~ Criticality*Connectivity ,data=featuresf);
avPlots(modelFit)
summary(modelFit)
library(ggplot2)
# load data
source("C://Users//chris//OneDrive//Documentos//GitHub//ML_SelfHealingUtility//loadData.R");
dataf<-loadData(fileName="Random_proper_comp_names.csv");
#Remove all reliability and utility values equal to zero
dataf<- dataf[dataf$RELIABILITY!=0,];
dataf <- dataf[dataf$UTILITY.INCREASE!=0,]
matrixInput<-data.frame(dataf$UTILITY.DROP,dataf$CRITICALITY,dataf$CONNECTIVITY,dataf$RELIABILITY);
colnames(matrixInput)<-c("Utility_Drop","Criticality","Connectivity","Reliability");
cor(matrixInput, method="kendall",use="pairwise");
res <- cor(matrixInput, method="kendall",use="pairwise");
res
res$P
res$p
res <- cor(matrixInput, method="kendall",use="pairwise");
res$P
install.packages("Hmisc")
library("Hmisc")
res <- cor(matrixInput, method="kendall",use="pairwise");
res <- rcorr(matrixInput, method="kendall",use="pairwise");
?rcorr
?cor
res <- rcorr(matrixInput, type="spearman);
res
##CORRELATIONS
#               Utility_Drop Criticality Connectivity Reliability
# Utility_Drop   1.00000000  0.85414904   0.36304154 -0.06915077
# Criticality    0.85414904  1.00000000  -0.04624587 -0.14121505
# Connectivity   0.36304154 -0.04624587   1.00000000  0.10884354
# Reliability   -0.06915077 -0.14121505   0.10884354  1.00000000
##p-values
#As we can see features (connectivity, criticality, reliabiliyt)
#are medium to low correlated
co
qqnorm(dataf$CRITICALITY,main="Normal Q-Q Plot - Criticality")+ qqline();
qqline(dataf$CRITICALITY)
qqnorm(dataf$CONNECTIVITY,main="Normal Q-Q Plot - Connectivity") + qqline();
qqline(dataf$CONNECTIVITY)
qqnorm(dataf$RELIABILITY,main="Normal Q-Q Plot - Reliability")
qqline(dataf$RELIABILITY)
res <- rcorr(matrixInput, type="spearman");
res <- rcorr(matrixInput, type=c("spearman"));
res <- rcorr(matrixInput);
res <- rcorr(matrixInput,type=c("pearson"));
res <- rcorr(data.matrix(matrixInput),type=c("pearson"));
res$P
res$r
res <- rcorr(data.matrix(matrixInput),type=c("spearman"));
res$P
res$r
ggplot(data=dataf, aes(x=dataf$UTILITY.INCREASE)) +
geom_bar(alpha=1, position="identity")+
geom_vline(aes(xintercept=mean(dataf$UTILITY.INCREASE, na.rm=T)),   # Ignore NA values for mean
color="red", linetype="dashed", size=1) +
ggtitle("Utility increase distribution")+
labs(x="Utility increase from disconnecting a component",
y="Frequency");
source('C:/Users/chris/OneDrive/Documentos/GitHub/ML_SelfHealingUtility/plotInputs.R', echo=TRUE)
ggplot(data=dataf, aes(x=dataf$UTILITY.INCREASE)) +
geom_bar(alpha=1, position="identity")+
geom_vline(aes(xintercept=mean(dataf$UTILITY.INCREASE, na.rm=T)),   # Ignore NA values for mean
color="red", linetype="dashed", size=1) +
ggtitle("Utility increase distribution")+
labs(x="Utility increase from disconnecting a component",
y="Frequency") +
scale_x_discrete(limits=c(min(dataf$UTILITY.INCREASE):max(dataf$UTILITY.INCREASE)));
ggplot(data=dataf, aes(x=dataf$UTILITY.INCREASE)) +
geom_bar(alpha=1, position="identity")+
geom_vline(aes(xintercept=mean(dataf$UTILITY.INCREASE, na.rm=T)),   # Ignore NA values for mean
color="red", linetype="dashed", size=1) +
ggtitle("Utility increase distribution")+
labs(x="Utility increase from disconnecting a component",
y="Frequency");
ggplot(data=dataf, aes(x=dataf$CRITICALITY)) +
geom_bar(alpha=.2, position="identity")+
geom_vline(aes(xintercept=mean(dataf$CRITICALITY, na.rm=T)),   # Ignore NA values for mean
color="red", linetype="dashed", size=1) +
ggtitle("Component criticality distribution")+
labs(x="Criticality of the component",
y="Frequency")+
scale_x_discrete(limits=c(min(dataf$CRITICALITY):max(dataf$CRITICALITY)));
ggplot(data=dataf, aes(x=dataf$RELIABILITY)) +
geom_histogram(binwidth = 0.1,alpha=.2, position="identity")+
geom_vline(aes(xintercept=mean(dataf$RELIABILITY, na.rm=T)),   # Ignore NA values for mean
color="red", linetype="dashed", size=1) +
ggtitle("Component reliability distribution")+
labs(x="Reliability of the component",
y="Frequency")+
scale_x_discrete(limits=c(min(dataf$RELIABILITY):max(dataf$RELIABILITY)));
ggplot(data=dataf, aes(x=dataf$CONNECTIVITY)) +
geom_bar(alpha=.2, position="identity")+
geom_vline(aes(xintercept=mean(dataf$CONNECTIVITY, na.rm=T)),   # Ignore NA values for mean
color="red", linetype="dashed", size=1) +
ggtitle("Component Connectivity distribution")+
labs(x="Connectivity of the component",
y="Frequency")+
scale_x_discrete(limits=c(min(dataf$CONNECTIVITY):max(dataf$CONNECTIVITY)));
qqnorm(dataf$CRITICALITY,main="Normal Q-Q Plot - Criticality")+ qqline();
qqline(dataf$CRITICALITY)
qqnorm(dataf$CRITICALITY,main="Normal Q-Q Plot - Criticality")+ qqline();
qqnorm(dataf$CONNECTIVITY,main="Normal Q-Q Plot - Connectivity") + qqline();
qqline(dataf$CONNECTIVITY)
qqnorm(dataf$RELIABILITY,main="Normal Q-Q Plot - Reliability")
qqline(dataf$RELIABILITY)
ggplot(data=dataf, aes(x=dataf$CONNECTIVITY,y=dataf$UTILITY.INCREASE)) +
geom_line(alpha=.2, position="identity") +
ggtitle("Utility by Connectivity ")+
labs(x="Connectivity of the component",
y="Utility Increase")+
scale_x_discrete(limits=c(min(dataf$CONNECTIVITY):max(dataf$CONNECTIVITY)));
ggplot(data=dataf, aes(x=dataf$CONNECTIVITY,y=dataf$UTILITY.INCREASE)) +
geom_dotplot(alpha=.2, position="identity") +
ggtitle("Utility by Connectivity ")+
labs(x="Connectivity of the component",
y="Utility Increase")+
scale_x_discrete(limits=c(min(dataf$CONNECTIVITY):max(dataf$CONNECTIVITY)));
ggplot(data=dataf, aes(x=dataf$CONNECTIVITY,y=dataf$UTILITY.INCREASE)) +
geom_dotplot() +
ggtitle("Utility by Connectivity ")+
labs(x="Connectivity of the component",
y="Utility Increase")+
scale_x_discrete(limits=c(min(dataf$CONNECTIVITY):max(dataf$CONNECTIVITY)));
ggplot(data=dataf, aes(x=dataf$CRITICALITY,y=dataf$UTILITY.INCREASE)) +
geom_dotplot() +
ggtitle("Utility by CRITICALITY ")+
labs(x="Criticality of the component",
y="Utility Increase")+
scale_x_discrete(limits=c(min(dataf$CRITICALITY):max(dataf$CRITICALITY)));
ggplot(data=dataf, aes(x=dataf$CONNECTIVITY,y=dataf$UTILITY.INCREASE)) +
geom_density() +
ggtitle("Utility by Connectivity ")+
labs(x="Connectivity of the component",
y="Utility Increase")+
scale_x_discrete(limits=c(min(dataf$CONNECTIVITY):max(dataf$CONNECTIVITY)));
ggplot(data=dataf, aes(x=dataf$CONNECTIVITY, y=dataf$UTILITY.INCREASE)) +
geom_point() + geom_abline()+
ggtitle("Utility by Connectivity ")+
labs(x="Connectivity of the component",
y="Utility Increase")+
scale_x_discrete(limits=c(min(dataf$CONNECTIVITY):max(dataf$CONNECTIVITY)));
ggplot(data=dataf, aes(x=dataf$CRITICALITY, y=dataf$UTILITY.INCREASE)) +
geom_point() + geom_abline()+
ggtitle("Utility by CRITICALITY ")+
labs(x="Criticality of the component",
y="Utility Increase")+
scale_x_discrete(limits=c(min(dataf$CRITICALITY):max(dataf$CRITICALITY)));
ggplot(data=dataf, aes(x=dataf$CRITICALITY, y=dataf$UTILITY.INCREASE)) +
geom_point() + geom_smooth(method="lm")+
ggtitle("Utility by CRITICALITY ")+
labs(x="Criticality of the component",
y="Utility Increase")+
scale_x_discrete(limits=c(min(dataf$CRITICALITY):max(dataf$CRITICALITY)));
ggplot(data=dataf, aes(x=dataf$CONNECTIVITY, y=dataf$UTILITY.INCREASE)) +
geom_point() + geom_smooth(method="lm")+
ggtitle("Utility by Connectivity ")+
labs(x="Connectivity of the component",
y="Utility Increase")+
scale_x_discrete(limits=c(min(dataf$CONNECTIVITY):max(dataf$CONNECTIVITY)));
ggplot(data=dataf, aes(x=dataf$RELIABILITY, y=dataf$UTILITY.INCREASE)) +
geom_point() + geom_smooth(method="lm")+
ggtitle("Utility by RELIABILITY ")+
labs(x="Reliability of the component",
y="Utility Increase")+
scale_x_discrete(limits=c(min(dataf$RELIABILITY):max(dataf$RELIABILITY)));
ggplot(data=dataf, aes(x=dataf$RELIABILITY, y=dataf$UTILITY.INCREASE)) +
geom_point() + geom_smooth(method="lm")+
ggtitle("Utility by RELIABILITY ")+
labs(x="Reliability of the component",
y="Utility Increase"));
ggplot(data=dataf, aes(x=dataf$RELIABILITY, y=dataf$UTILITY.INCREASE)) +
geom_point() + geom_smooth(method="lm")+
ggtitle("Utility by RELIABILITY ")+
labs(x="Reliability of the component",
y="Utility Increase");
ggplot(data=dataf, aes(x=dataf$CONNECTIVITY, y=dataf$UTILITY.INCREASE)) +
geom_point() + geom_smooth(method="lm")+
ggtitle("Utility by CONNECTIVITY ")+
labs(x="Connectivity of the component",
y="Utility Increase")+
scale_x_discrete(limits=c(min(dataf$CONNECTIVITY):max(dataf$CONNECTIVITY)));
install.packages("stringi")
library(stringi)
library(data.table)
library(rpart)
library(rpart.plot)
library(caret)
library(xgboost)
library(pROC)
install.packages("readr")
library(readr)
library(Matrix)
install.packages("Ckmeans.1d.dp")
library(Ckmeans.1d.dp)
install.packages("devtools")
library(devtools)
install_github("AppliedDataSciencePartners/xgboostExplainer")
install.packages("stringi")
install.packages("devtools")
install.packages("devtools")
source("C://Users//chris//OneDrive//Documentos//GitHub//ML_SelfHealingUtility//loadData.R");
dataf<-loadData(fileName="Random_proper_comp_names.csv");
dataf<- dataf[dataf$RELIABILITY!=0,];
dataf <- dataf[dataf$UTILITY.INCREASE!=0,]
featuresf<-data.frame(dataf$CRITICALITY,
dataf$CONNECTIVITY,
dataf$RELIABILITY,
dataf$UTILITY.INCREASE);
colnames(featuresf) <- c("Criticality","Connectivity","Reliability","Utility");
#Remove all reliability values equal to zero
dataf<- dataf[dataf$RELIABILITY!=0,];
dataf <- dataf[dataf$UTILITY.INCREASE!=0,]
# consider only the feature columns
featuresdf<-data.frame(dataf$CRITICALITY,
dataf$CONNECTIVITY,
dataf$RELIABILITY,
dataf$UTILITY.INCREASE);
colnames(featuresdf) <- c("Criticality","Connectivity","Reliability","Utility");
#Scramble the dataset before extracting the training set.
set.seed(8850);
g<- runif((nrow(featuresdf))); #generates a random distribution
featuresdf <- featuresdf[order(g),];
#################################################
#Select train and test data
totalData = dim(featuresdf)[1];
trainingSize = trunc(totalData * 0.7);
startTestIndex = totalData - trainingSize;
endTestIndex = totalData;
trainingData<- as.data.frame(featuresdf[1:trainingSize,]);
testingData<-as.data.frame(featuresdf[startTestIndex:endTestIndex,]);
cv <- createFolds(trainingData[,"Utility"], k = 10);
# Control
ctrl <- trainControl(method = "cv",index = cv);
####################
xgb.train.data = xgb.DMatrix(data.matrix(trainingData[,1:10]), label = trainingData[,"Utility"], missing = NA)
xgb.train.data = xgb.DMatrix(data.matrix(trainingData[,1:3]), label = trainingData[,"Utility"], missing = NA)
param <- list(objective = "binary:logistic", base_score = 0.5)
xgboost.cv = xgb.cv(param=param, data = xgb.train.data, folds = cv, nrounds = 1500, early_stopping_rounds = 100, metrics='auc')
xgb.train.data = xgb.DMatrix(data.matrix(trainingData[,1:3]), label = as.factor(trainingData[,"Utility"]), missing = NA)
param <- list(objective = "binary:logistic", base_score = 0.5)
xgboost.cv = xgb.cv(param=param, data = xgb.train.data, folds = cv, nrounds = 1500, early_stopping_rounds = 100, metrics='auc')
source("C://Users//chris//OneDrive//Documentos//GitHub//ML_SelfHealingUtility//loadData.R");
dataf<-loadData(fileName="Random_proper_comp_names.csv");
staticf<- loadData(fileName = "MLDATA2_STATIC.csv");
# randomDataf<- loadData(fileName = "MLDATA2_STATIC.csv");
#summary(dataf);
#Remove all Failures that do not cause utility increase
#dataf<- dataf[dataf$FAILURE.NAME=="CF3",];
#validationf<- validationf[dataf$FAILURE.NAME=="CF3",];
#Select only the ws that have the Authentication component
#dataf<-dataf[grep("Auth", dataf$AFFECTED.COMPONENT), ];
#validationf<-validationf[grep("Auth", dataf$AFFECTED.COMPONENT), ];
#Remove all reliability values equal to zero
dataf<- dataf[dataf$RELIABILITY!=0,];
dataf <- dataf[dataf$UTILITY.INCREASE!=0,]
staticf<- staticf[staticf$RELIABILITY!=0,];
staticf<- staticf[staticf$UTILITY.INCREASE!=0,];
# consider only the feature columns
featuresf<-data.frame(dataf$CRITICALITY,
dataf$CONNECTIVITY,
dataf$RELIABILITY,
dataf$UTILITY.INCREASE);
validationf<-data.frame(staticf$CRITICALITY,
staticf$CONNECTIVITY,
staticf$RELIABILITY,
staticf$UTILITY.INCREASE);
colnames(featuresf) <- c("Criticality","Connectivity","Reliability","Utility");
colnames(validationf) <- c("Criticality","Connectivity","Reliability","Utility");
modelFit<- lm(Utility ~ Criticality*Connectivity ,data=featuresf);
summary(modelFit)
modelFit<- lm(Utility ~ Connectivity*Connectivity + Reliability ,data=featuresf);
summary(modelFit)
modelFit<- lm(Utility ~ Criticality ,data=featuresf);
summary(modelFit)
modelFit<- lm(Utility ~ Connectivity ,data=featuresf);
modelFit<- lm(Utility ~ Connectivity ,data=featuresf);
summary(modelFit)
plot(res)
matrixInput<-data.frame(dataf$UTILITY.DROP,dataf$CRITICALITY,dataf$CONNECTIVITY,dataf$RELIABILITY);
colnames(matrixInput)<-c("Utility_Drop","Criticality","Connectivity","Reliability");
res <- rcorr(data.matrix(matrixInput),type=c("spearman"));
plot(res)
source("C://Users//chris//OneDrive//Documentos//GitHub//ML_SelfHealingUtility//loadData.R");
dataf<-loadData(fileName="Random_proper_comp_names.csv");
dataf<- dataf[dataf$RELIABILITY!=0,];
dataf <- dataf[dataf$UTILITY.INCREASE!=0,]
featuresf<-data.frame(dataf$CRITICALITY,
dataf$CONNECTIVITY,
dataf$RELIABILITY,
dataf$UTILITY.INCREASE);
colnames(featuresf) <- c("Criticality","Connectivity","Reliability","Utility");
plot(featuresf);
plot(featuresf);
staticf<- loadData(fileName = "MLDATA2_STATIC.csv");
staticf<- staticf[staticf$RELIABILITY!=0,];
staticf<- staticf[staticf$UTILITY.INCREASE!=0,];
validationf<-data.frame(staticf$CRITICALITY,
staticf$CONNECTIVITY,
staticf$RELIABILITY,
staticf$UTILITY.INCREASE);
colnames(validationf) <- c("Criticality","Connectivity","Reliability","Utility");
title("Training");
staticf<- staticf[staticf$RELIABILITY!=0,];
staticf<- staticf[staticf$UTILITY.INCREASE!=0,];
validationf<-data.frame(staticf$CRITICALITY,
staticf$CONNECTIVITY,
staticf$RELIABILITY,
staticf$UTILITY.INCREASE);
colnames(validationf) <- c("Criticality","Connectivity","Reliability","Utility");
plot(validationf);
title("Validation");
modelFit<- lm(Utility ~ Criticality*Connectivity ,data=featuresf);
avPlots(modelFit)
modelFit<- lm(Utility ~ Criticality*Connectivity ,data=featuresf);
avPlots(modelFit)
lmPredicted <- predict(modelFit, featuresf)
residual.modelFit<- resid(modelFit);
plot(x=featuresf$Criticality,y=residual.modelFit,
ylab="Residuals", xlab="Criticality",
main="Residual Plot Actual Utility minus Predicted Utility");
abline(0,0);
plot(x=featuresf$Criticality,y=featuresf$Utility);
points(featuresf$Criticality, lmPredicted, col = "red", pch=4,
abline(modelFit));
title("Linear Regression - actual (circles) vs predicted (crosses)");
lmPredicted <- predict(modelFit, validationf)
plot(x=featuresf$Criticality,y=featuresf$Utility);
points(featuresf$Criticality, lmPredicted, col = "red", pch=4,
abline(modelFit));
title("Linear Regression - actual (circles) vs predicted (crosses)");
lmPredicted
lmPredicted <- predict(modelFit, validationf);
plot(x=validationf$Criticality,y=validationf$Utility);
points(validationf$Criticality, exp(lmPredicted), col = "red", pch=4);
title("Linear Regression - actual (circles) vs predicted (crosses)");
lmPredicted <- predict(modelFit, validationf);
plot(x=validationf$Criticality,y=validationf$Utility);
points(validationf$Criticality, lmPredicted, col = "red", pch=4);
title("Linear Regression - actual (circles) vs predicted (crosses)");
error<- featuresf$Utility - lmPredicted# same as data$Y - predictedY
predictionRMSE <- rmse(error)
predictionRMSE
error<- validationf$Utility - lmPredicted # same as data$Y - predictedY
predictionRMSE <- rmse(error)
predictionRMSE
#Compute error
rmse <- function(error)
{
sqrt(mean(error^2))
}
predictionRMSE <- rmse(error)
predictionRMSE
crPlots(modelFit)
install.packages("gvlma")
library(gvlma)
gvmodel <- gvlma(modelFit)
summary(gvmodel)
prediction<- predict(modelFit, featuresf);
plot(modelFit)
plot(prediction)
summary(gvmodel)
prediction<- predict(modelFit, validationf);
plot(modelFit)
compareTable <- data.frame(validationf$Criticality,validationf$Connectivity,
log(validationf$Utility),
prediction);
colnames(compareTable) <- c("criticality","connectivity","actual_utility","predicted_utility");
compareTable
plot(prediction)
plot(prediction)
crPlots(modelFit)
plot(x=featuresf$Criticality,y=featuresf$Utility, abline(modelFit,cex = 1.3,pch = 16));
title("Linear Regression - actual (circles) vs predicted (line)");
plot(x=featuresf$Criticality,y=featuresf$Utility,
abline(modelFit),cex = 1.3,pch = 16);
title("Linear Regression - actual (circles) vs predicted (line)");
plot(x=featuresf$Criticality,y=featuresf$Utility,
abline(modelFit),cex = 1.3, pch = 16);
title("Linear Regression - actual (circles) vs predicted (line)");
plot(x=featuresf$Criticality,y=featuresf$Utility);
points(featuresf$Criticality, lmPredicted, col = "red", pch=4,
abline(modelFit));
title("Linear Regression - actual (circles) vs predicted (crosses)");
lmPredicted <- predict(modelFit, featuresf)
plot(x=featuresf$Criticality,y=featuresf$Utility);
points(featuresf$Criticality, lmPredicted, col = "red", pch=4,
abline(modelFit));
title("Linear Regression - actual (circles) vs predicted (crosses)");
plot(x=validationf$Criticality,y=validationf$Utility);
plot(x=validationf$Criticality,y=validationf$Utility);
points(validationf$Criticality, lmPredictedValidation, col = "red", pch=4,abline(modelFit));
title("Linear Regression - actual (circles) vs predicted (crosses)");
lmPredictedValidation <- predict(modelFit, validationf);
plot(x=validationf$Criticality,y=validationf$Utility);
points(validationf$Criticality, lmPredictedValidation, col = "red", pch=4,abline(modelFit));
title("Linear Regression - actual (circles) vs predicted (crosses)");
rmse <- function(error)
{
sqrt(mean(error^2))
}
error<- validationf$Utility - lmPredictedValidation # same as data$Y - predictedY
predictionRMSE <- rmse(error)
predictionRMSE
summary(dataf$UTILITY.INCREASE)
