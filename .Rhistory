subset_df <-subset(subset_df,select= c(QuestionID,conf.1,conf.2,conf.3,conf.4,conf.5));
question_by <- group_by(subset_df,QuestionID);
summaryTable<- summarize(question_by,
Total_1 = sum(conf.1),Total_2 = sum(conf.2),
Total_3 = sum(conf.3),Total_4=sum(conf.4),
Total_5 = sum(conf.5));
colnames(summaryTable)<-c("Question.ID","conf.1","conf.2","conf.3","conf.4","conf.5");
summaryTable["utility"]<-summaryTable$conf.1+2*summaryTable$conf.2+3*summaryTable$conf.3+
4*summaryTable$conf.4+5*summaryTable$conf.5;
return(summaryTable);
}
utility_table<-confidence_utility(df=sampled_dataf);
?sort
utility_table<-sort(utility_table,utility_table$utility,decreasing = TRUE);
utility_table<-data.frame(sort(utility_table,utility_table$utility,decreasing = TRUE));
sort(utility_table,utility_table$utility,decreasing = TRUE)
utility_table<-utility_table[order(utility_table$utility),];
head(utility_table)
utility_table<-utility_table[order(utility_table$utility, decreasing = TRUE),];
head(utility_table)
topQuestions<-utility_table[1:5,];
topQuestions
sampleAnswers<- function(questionList, answers_df){
sampled_dataf<-data.frame();
questionID_f <- data.frame(unique(answers_df$Question.ID));
colnames(questionID_f)<- c("id");
for(id in questionID_f$id){
questionSet<-answers_df[answers_df$Question.ID==id,]
sampled_df<- sample_n(questionSet, 5)
sampled_dataf<-rbind(sampled_dataf,sampled_df);
}
return(sampled_dataf);
}
view(answer_df)
View(answer_df)
View(dataf)
View(dataf)
source('C:/Users/chris/OneDrive/Documentos/GitHub/ML_VotingAggregation/aggregateVotes.R')
outcomes$precision <- 1
outcomes<- data.frame();
outcomes$precision <- 1
outcomes$precision <- 1
colnames(outcomes)<-c("precision","recall","sensibility","sensitivity","accuracy");
colnames(outcomes)<-c("precision","recall","sensibility","sensitivity","accuracy");
outcomes<- data.frame();
colnames(outcomes)<-c("precision","recall","sensibility","sensitivity","accuracy");
outcomes<- data.frame(1:5);
colnames(outcomes)<-c("precision","recall","sensibility","sensitivity","accuracy");
outcomes<- data.frame(c(1:5));
colnames(outcomes)<-c("precision","recall","sensibility","sensitivity","accuracy");
outcomes<- data.frame(c(1:5));
colnames(outcomes)<-c("precision","recall","sensibility","sensitivity","accuracy");
outcomes
matrix(1:5, ncol = 5, nrow = 1)
outcomes <- matrix(1:5, ncol = 5, nrow = 1)
colnames(outcomes)<-c("precision","recall","sensibility","sensitivity","accuracy");
outcomes
outcomes$precision <- 1
outcomes
outcomes<- matrix();
outcomes
colnames(outcomes)<-c("precision","recall","sensibility","sensitivity","accuracy");
colnames(outcomes)<-c("precision");
outcomes
outcomes$precision<-1
outcomes
outcomes<- data.frame(1;2;3;4;5);
outcomes<- list(precision=0, recall=0, sensibility=0, sensitivity=0, accuracy=0);
outcomesMatrix <- rbind(outcomesMatrix,outcomes);
outcomesf<-data.frame(outcomes);
accumOutcomes <- rbind(accumOutcomes,outcomesf);
accumOutcomes <- rbind(accumOutcomes,outcomesf);
accumOutcomes<- data.frame();
accumOutcomes <- rbind(outcomesf,outcomesf);
accumOutcomes<- list();
accumOutcomes <- rbind(accumOutcomes,outcomesf);
accumOutcomes
outcomes<- list(precision=1, recall=0, sensibility=0, sensitivity=0, accuracy=0);
outcomesf<-data.frame(outcomes);
accumOutcomes <- rbind(accumOutcomes,outcomesf);
accumOutcomes
data<- c(2:2.5,0.1)
data
data<- c(2:2.5)
data
?c
c(2:5)
start <- 2
end <- 2.5
data <- seq(a,b,sign(b-a)*0.5)
data <- seq(start,end,sign(b-a)*0.5)
data <- seq(start,end,sign(end-start)*0.5)
data
data <- seq(start,end,sign(end-start)*0.1)
data
logY <- log(data)
logY
x <- c(1:6)
x
plot(x=x,y=data)
plot(x=x,y=logY)
invLogY=1/logY
invData <- 1/data
plot(x=x,y=invData)
plot(x=x,y=invLogY)
plot(x=x,y=invData)
logY <- log2(data)
invLogY=1/logY
plot(x=x,y=invLogY)
install.packages("rJava")
dtf <- load
library(xgboost)
# load data
source("C://Users//chris//OneDrive//Documentos//GitHub//ML_SelfHealingUtility//loadData.R");
# Initialize section ------------------------------------------------------
index=0;
datasetSize="10K";
dataf <- loadData(fileName = "data//10K//Saturaring_10K.csv");
dataf <- loadData(fileName = "data//10K//Saturating_10K.csv");
peformance <- dataf$PMax * tanh(dataf$alpha * dataf$REPLICA/dataf$REQUEST);
replica_request_RATIO <- dataf$REPLICA / dataf$REQUEST;
plot(replica_request_RATIO,performance)
peformance <- dataf$PMax * tanh(dataf$alpha * dataf$REPLICA/dataf$REQUEST);
replica_request_RATIO <- dataf$REPLICA / dataf$REQUEST;
plot(replica_request_RATIO,performance)
performance <- dataf$PMax * tanh(dataf$alpha * dataf$REPLICA/dataf$REQUEST);
replica_request_RATIO <- dataf$REPLICA / dataf$REQUEST;
plot(replica_request_RATIO,performance)
replica_request_RATIO <- dataf$alpha* dataf$REPLICA / dataf$REQUEST;
plot(replica_request_RATIO,performance) + title ("Saturating performance")
dtf <- dataf[dataf$AFFECTED_COMPONENT=="Item Management Service",]
dtf <- dataf[dataf$AFFECTED_COMPONENT=="Item Management Service",]
performance <- dtf$PMax * tanh(dtf$alpha * dtf$REPLICA/dtf$REQUEST);
replica_request_RATIO <- dtf$alpha* dtf$REPLICA / dtf$REQUEST;
plot(replica_request_RATIO,performance) + title ("Saturating performance - Item Management Service Component")
dataf <- dtf
mcResultsf <- trainModel(index,dataf,mcResultsf);
trainModel <- function(i, dataf,mcResultsf){
# Select feature columns --------------------------------------------------
# featuresdf<- select_Linear(dataf)
# featuresdf<- select_Probabilistic(dataf)
# featuresdf<- select_Discontinous(dataf)
# featuresdf<- select_Saturation(dataf)
featuresdf<- select_ALL(dataf)
inputFeatures <- dim(featuresdf)[2] - 1;
#RUN ALL DATA SETS WITH ALL FEATURES TO CHECK IF THE MODEL IS ABLE TO GET RID OF
#USELESS FEATURES.
#averageResultsf <- data.frame(matrix(data=NA,nrow=6,ncol=8));
#colnames(resultsf) <- c("DataSet","Train_RMSE_MEAN","Train_RMSE_STD","Test_RMSE_MEAN",
#                        "Test_RMSE_STD","RMSE","R_Squared", "MAPD");
proportion <- 0.7
featuresdf <- featuresdf[featuresdf$UTILITY_INCREASE!=0,];
featuresdf <- featuresdf[featuresdf$ADT!=0,];
#for(i in c(1:100)){
# Scramble data -----------------------------------------------------------
featuresdf <- scrambleData(datadf=featuresdf);
# Extract training ad validation sets -------------------------------------
#Training = used to create a model
#Validation = used to compute prediction error (Bias)
totalData = dim(featuresdf)[1];
trainingSize = trunc(totalData * proportion);
startTestIndex = totalData - trainingSize;
trainingData<- as.data.frame(featuresdf[1:trainingSize,]);
validationData<-as.data.frame(featuresdf[startTestIndex:totalData,]);
# Build model -------------------------------------------------------------
xgb.train.data = xgb.DMatrix(data.matrix(trainingData[,1:inputFeatures]),
label = trainingData[,"UTILITY_INCREASE"],
missing = NA)
param <- list(objective = "reg:linear", base_score = 0.5)# booster="gbtree")
xgboost.cv = xgb.cv(param=param, data = xgb.train.data, nfold = 10, nrounds = 1500,
early_stopping_rounds = 100, metrics='rmse',verbose = FALSE)
best_iteration <- xgboost.cv$best_iteration;
xgboost.cv$evaluation_log[best_iteration]
xgb.model <- xgboost(param =param,  data = xgb.train.data, nrounds=best_iteration)
# Generate PMML file ------------------------------------------------------
# Generate feature map
mpg.fmap = r2pmml::genFMap(featuresdf)
r2pmml::writeFMap(mpg.fmap, "xgboost.fmap")
# Save the model in XGBoost proprietary binary format
xgb.save(xgb.model, "xgboost.model")
# Dump the model in text format
xgb.dump(xgb.model, "xgboost.model.txt", fmap = "xgboost.fmap")
# Validation -------------------------------------------------------------
y_pred <- predict(xgb.model, as.matrix(validationData));
error <- y_pred - validationData$UTILITY_INCREASE;
mcResultsf$DataSet[i]<-datasetName[i];
mcResultsf$Train_RMSE_MEAN[i]<-xgboost.cv$evaluation_log[best_iteration]$train_rmse_mean;
mcResultsf$Train_RMSE_STD[i]<-xgboost.cv$evaluation_log[best_iteration]$train_rmse_std;
mcResultsf$Test_RMSE_MEAN[i]<-xgboost.cv$evaluation_log[best_iteration]$test_rmse_mean;
mcResultsf$Test_RMSE_STD[i]<-xgboost.cv$evaluation_log[best_iteration]$test_rmse_std;
mcResultsf$RMSE[i] <- rmse(error);
mcResultsf$R_Squared[i] <- r_squared(y_pred,validationData$UTILITY_INCREASE);
mcResultsf$MAPD[i] <- mapd(y_pred,validationData$UTILITY_INCREASE);
#}
return(mcResultsf);
}
mcResultsf <- trainModel(index,dataf,mcResultsf);
datasetName <- c(linear,discontinous,saturating,all);
datasetName <- c("Saturating100","Saturating1000","Saturating10K");
dataf <- dtf
mcResultsf <- trainModel(index,dataf,mcResultsf);
mcResultsf <- data.frame(matrix(data=NA,nrow=4,ncol=8));
colnames(mcResultsf) <- c("DataSet","Train_RMSE_MEAN","Train_RMSE_STD","Test_RMSE_MEAN",
"Test_RMSE_STD","RMSE","R_Squared", "MAPD");
index=0;
index <- index + 1;
mcResultsf <- trainModel(index,dataf,mcResultsf);
mcResultsf
dataf <- loadData(fileName = "data//10K//Saturating_10K.csv");
dataf <- loadData(fileName = "data//10K//Saturating_10K.csv");
index <- index + 1;
mcResultsf <- trainModel(index,dataf,mcResultsf);
mcResultsf
datasetSize="10K";
linear = paste0("Linear",datasetSize,".csv");
discontinous = paste0("Discontinous",datasetSize,".csv");
saturating = paste0("Saturating",datasetSize,".csv");
all = paste0("ALL",datasetSize,".csv");
datasetName <- c(linear,discontinous,saturating,all);
mcResultsf <- data.frame(matrix(data=NA,nrow=4,ncol=8));
colnames(mcResultsf) <- c("DataSet","Train_RMSE_MEAN","Train_RMSE_STD","Test_RMSE_MEAN",
"Test_RMSE_STD","RMSE","R_Squared", "MAPD");
folder <- "data//New4Cases//";
dataf <-loadData(fileName=paste0(folder,linear));
index <- index + 1;
mcResultsf <- trainModel(index,dataf,mcResultsf);
mcResultsf
datasetName <- c("ALL100","ALL1000","ALL10K");
dataf <- loadData(fileName=paste0(folder,all));
all = paste0("ALL",datasetSize,".csv");
datasetName <- c("ALL10K-ALL","ALL10K-Item Mgmt Service","ALL10K-Query Service");
dataf <- loadData(fileName=paste0(folder,all));
index=0;
index=0;
linear = paste0("Linear",datasetSize,".csv");
discontinous = paste0("Discontinous",datasetSize,".csv");
saturating = paste0("Saturating",datasetSize,".csv");
all = paste0("ALL",datasetSize,".csv");
datasetName <- c(linear,discontinous,saturating,all);
#DATA STRUCTURE TO KEEP THE INTERMEDIATE MODELS
mcResultsf <- data.frame(matrix(data=NA,nrow=4,ncol=8));
colnames(mcResultsf) <- c("DataSet","Train_RMSE_MEAN","Train_RMSE_STD","Test_RMSE_MEAN",
"Test_RMSE_STD","RMSE","R_Squared", "MAPD");
folder <- "data//New4Cases//";
datasetName <- c("ALL10K-ALL","ALL10K-Item Mgmt Service","ALL10K-Query Service");
dataf <- loadData(fileName=paste0(folder,all));
index <- index + 1;
mcResultsf <- trainModel(index,dataf,mcResultsf);
mcResultsf
fileName = paste0(folder,all);
dataf <- loadData(fileName);
mcResultsf <- trainModel(index,dataf,mcResultsf);
mcResultsf
dtf <- dataf[dataf$AFFECTED_COMPONENT=="Item Management Service",]
dataf <- dtf
index <- index + 1;
mcResultsf <- trainModel(index,dataf,mcResultsf);
mcResultsf
index=0;
datasetSize="10K";
mcResultsf <- data.frame(matrix(data=NA,nrow=4,ncol=8));
colnames(mcResultsf) <- c("DataSet","Train_RMSE_MEAN","Train_RMSE_STD","Test_RMSE_MEAN",
"Test_RMSE_STD","RMSE","R_Squared", "MAPD");
folder <- "data//New4Cases//";
dataf <-loadData(fileName=paste0(folder,linear));
datasetName <- c("Linear100","Linear1000","Linear10K");
datasetName <- c("Linear100","Linear1000","Linear10K");
index=0;
datasetSize="10K";
linear = paste0("Linear",datasetSize,".csv");
discontinous = paste0("Discontinous",datasetSize,".csv");
saturating = paste0("Saturating",datasetSize,".csv");
all = paste0("ALL",datasetSize,".csv");
datasetName <- c(linear,discontinous,saturating,all);
mcResultsf <- data.frame(matrix(data=NA,nrow=4,ncol=8));
colnames(mcResultsf) <- c("DataSet","Train_RMSE_MEAN","Train_RMSE_STD","Test_RMSE_MEAN",
"Test_RMSE_STD","RMSE","R_Squared", "MAPD");
folder <- "data//New4Cases//";
dataf <- loadData(fileName=paste0(folder,all));
index <- index + 1;
mcResultsf <- trainModel(index,dataf,mcResultsf);
mcResultsf
datasetName <- c("ALL10K-ALL","ALL10K-Item Mgmt Service","ALL10K-Query Service");
fileName = paste0(folder,datasetName[index])
datasetName <- c("ALL100","ALL1000","ALL10K");
fileName = paste0(folder,datasetName[index])
dataf <- loadData(fileName);
fileName = paste0(folder,datasetName[index],".csv")
dataf <- loadData(fileName);
mcResultsf <- trainModel(index,dataf,mcResultsf);
mcResultsf
index <- index + 1;
fileName = paste0(folder,datasetName[index],".csv")
dataf <- loadData(fileName);
mcResultsf <- trainModel(index,dataf,mcResultsf);
mcResultsf
index <- index + 1;
fileName = paste0(folder,datasetName[index],".csv")
dataf <- loadData(fileName);
mcResultsf <- trainModel(index,dataf,mcResultsf);
mcResultsf
dtf <- dataf[dataf$AFFECTED_COMPONENT=="Item Management Service",]
dataf <- dtf
index <- index + 1;
mcResultsf <- trainModel(index,dataf,mcResultsf);
mcResultsf
dataf <- loadData(fileName);
dtf2 <- dataf[dataf$AFFECTED_COMPONENT=="Query Service",]
dataf <- dtf2
mcResultsf <- trainModel(index,dataf,mcResultsf);
mcResultsf
dtf3 <- dataf[dataf$AFFECTED_COMPONENT=="Authentication Service",]
dim(dtf3)
dataf <- loadData(fileName);
dtf3 <- dataf[dataf$AFFECTED_COMPONENT=="Authentication Service",]
dim(dtf3)
dataf <- dtf3
mcResultsf <- trainModel(index,dataf,mcResultsf);
mcResultsf
datasetName <- c("Linear100","Linear1000","Linear10K");
index=0;
index <- index + 1;
fileName = paste0(folder,datasetName[index],".csv")
dataf <- loadData(fileName);
mcResultsf <- trainModel(index,dataf,mcResultsf);
mcResultsf
index <- index + 1;
fileName = paste0(folder,datasetName[index],".csv")
dataf <- loadData(fileName);
mcResultsf <- trainModel(index,dataf,mcResultsf);
mcResultsf
index <- index + 1;
fileName = paste0(folder,datasetName[index],".csv")
dataf <- loadData(fileName);
mcResultsf <- trainModel(index,dataf,mcResultsf);
mcResultsf
dtf <- dataf[dataf$AFFECTED_COMPONENT=="Item Management Service",]
dim(dtf)
dataf <- dtf
index <- index + 1;
mcResultsf <- trainModel(index,dataf,mcResultsf);
mcResultsf
dim(dtf)
dtf <- dataf[dataf$AFFECTED_COMPONENT=="Query Service",]
dim(dtf)
dataf <- loadData(fileName);
dtf <- dataf[dataf$AFFECTED_COMPONENT=="Query Service",]
dim(dtf)
dataf <- dtf
mcResultsf <- trainModel(index,dataf,mcResultsf);
mcResultsf
dataf <- loadData(fileName);
dtf <- dataf[dataf$AFFECTED_COMPONENT=="Authentication Service",]
dim(dtf)
dataf <- dtf
mcResultsf <- trainModel(index,dataf,mcResultsf);
mcResultsf
datasetName <- c("Discontinous100","Discontinous1000","Discontinous10K");
index=0;
fileName = paste0(folder,datasetName[index],".csv")
index=1;
fileName = paste0(folder,datasetName[index],".csv")
dataf <- loadData(fileName);
mcResultsf <- trainModel(index,dataf,mcResultsf);
mcResultsf
index <- index + 1;
fileName = paste0(folder,datasetName[index],".csv")
dataf <- loadData(fileName);
mcResultsf <- trainModel(index,dataf,mcResultsf);
mcResultsf
index <- index + 1;
fileName = paste0(folder,datasetName[index],".csv")
dataf <- loadData(fileName);
mcResultsf <- trainModel(index,dataf,mcResultsf);
mcResultsf
dtf <- dataf[dataf$AFFECTED_COMPONENT=="Item Management Service",]
dim(dtf)
dataf <- dtf
mcResultsf <- trainModel(index,dataf,mcResultsf);
mcResultsf
index
index <- index + 1;
dataf <- loadData(fileName);
dtf <- dataf[dataf$AFFECTED_COMPONENT=="Query Service",]
dim(dtf)
dataf <- dtf
mcResultsf <- trainModel(index,dataf,mcResultsf);
mcResultsf
dataf <- loadData(fileName);
dtf <- dataf[dataf$AFFECTED_COMPONENT=="Authentication Service",]
dim(dtf)
dataf <- dtf
mcResultsf <- trainModel(index,dataf,mcResultsf);
mcResultsf
datasetName <- c("Saturating100","Saturating1000","Saturating10K");
index=1;
fileName = paste0(folder,datasetName[index],".csv")
dataf <- loadData(fileName);
mcResultsf <- trainModel(index,dataf,mcResultsf);
mcResultsf
dataf <- NULL
dataf <- loadData(fileName);
dataf <- loadData(fileName = "data//10K//Saturating_10K.csv");
dataf <- loadData(fileName = "data//New4Cases//Saturating_10K.csv");
fileName = paste0(folder,datasetName[index],".csv")
dataf <- loadData(fileName);
mcResultsf <- trainModel(index,dataf,mcResultsf);
mcResultsf
fileName = paste0(folder,datasetName[index],".csv")
fileName
index=3;
fileName = paste0(folder,datasetName[index],".csv")
fileName
dataf <- loadData(fileName);
mcResultsf <- trainModel(index,dataf,mcResultsf);
mcResultsf
mcResultsf <- data.frame(matrix(data=NA,nrow=4,ncol=8));
colnames(mcResultsf) <- c("DataSet","Train_RMSE_MEAN","Train_RMSE_STD","Test_RMSE_MEAN",
"Test_RMSE_STD","RMSE","R_Squared", "MAPD");
folder <- "data//New4Cases//";
dataf <- loadData(fileName = "data//New4Cases//Saturating_10K.csv");
mcResultsf <- data.frame(matrix(data=NA,nrow=4,ncol=8));
colnames(mcResultsf) <- c("DataSet","Train_RMSE_MEAN","Train_RMSE_STD","Test_RMSE_MEAN",
"Test_RMSE_STD","RMSE","R_Squared", "MAPD");
folder <- "data//New4Cases//";
datasetName <- c("Saturating100","Saturating1000","Saturating10K");
index <- index + 1;
fileName = paste0(folder,datasetName[index],".csv")
dataf <- loadData(fileName);
fileName = paste0(folder,datasetName[index],".csv")
index=0;
mcResultsf <- data.frame(matrix(data=NA,nrow=4,ncol=8));
colnames(mcResultsf) <- c("DataSet","Train_RMSE_MEAN","Train_RMSE_STD","Test_RMSE_MEAN",
"Test_RMSE_STD","RMSE","R_Squared", "MAPD");
folder <- "data//New4Cases//";
fileName = paste0(folder,datasetName[index],".csv")
datasetName <- c("Saturating100","Saturating1000","Saturating10K");
fileName = paste0(folder,datasetName[index],".csv")
fileName = paste0(folder,datasetName[index],".csv")
datasetName <- c("Saturating100","Saturating1000","Saturating10K");
index <- index + 1;
fileName = paste0(folder,datasetName[index],".csv")
dataf <- loadData(fileName);
mcResultsf <- trainModel(index,dataf,mcResultsf);
mcResultsf
index <- index + 1;
fileName = paste0(folder,datasetName[index],".csv")
dataf <- loadData(fileName);
mcResultsf <- trainModel(index,dataf,mcResultsf);
mcResultsf
index <- index + 1;
fileName = paste0(folder,datasetName[index],".csv")
dataf <- loadData(fileName);
mcResultsf <- trainModel(index,dataf,mcResultsf);
mcResultsf
dtf <- dataf[dataf$AFFECTED_COMPONENT=="Item Management Service",]
dim(dtf)
dataf <- dtf
mcResultsf <- trainModel(index,dataf,mcResultsf);
mcResultsf
dataf <- loadData(fileName);
dtf <- dataf[dataf$AFFECTED_COMPONENT=="Query Service",]
dim(dtf)
dataf <- dtf
index <- index + 1;
mcResultsf <- trainModel(index,dataf,mcResultsf);
mcResultsf
dataf <- loadData(fileName);
dtf <- dataf[dataf$AFFECTED_COMPONENT=="Authentication Service",]
dim(dtf)
dataf <- dtf
mcResultsf <- trainModel(index,dataf,mcResultsf);
mcResultsf
dataf <- loadData(fileName = "data//New4Cases//Saturating_10K.csv");
dataf <- loadData(fileName = "data//New4Cases//Saturating10K.csv");
performance <- dataf$PMax * tanh(dataf$alpha * dataf$REPLICA/dataf$REQUEST);
replica_request_RATIO <- dataf$alpha* dataf$REPLICA / dataf$REQUEST;
plot(replica_request_RATIO,performance) + title ("Saturating performance")
dataf <- loadData(fileName);
dataf <- loadData(fileName = "data//New4Cases//Saturating10K.csv");
performance <- dataf$PMax * tanh(dataf$alpha * dataf$REPLICA/dataf$REQUEST);
replica_request_RATIO <- dataf$alpha* dataf$REPLICA / dataf$REQUEST;
plot(replica_request_RATIO)
plot(performance)
plot(x=replica_request_RATIO,performance) + title ("Saturating performance")
dtf <- dataf[dataf$AFFECTED_COMPONENT=="Item Management Service",]
performance <- dtf$PMax * tanh(dtf$alpha * dtf$REPLICA/dtf$REQUEST);
replica_request_RATIO <- dtf$alpha* dtf$REPLICA / dtf$REQUEST;
plot(replica_request_RATIO,performance) + title ("Saturating performance - Item Management Service Component")
replica_request_RATIO<50
tableView$X<- replica_request_RATIO<50
tableView$X<- replica_request_RATIO
tableView <- data.frame(replica_request_RATIO,performance)
view <- tableView[tableView$replica_request_RATIO<50,]
dim(view)
dim(tableView)
view <- view[view$performance>7,]
dim(view)
dataf2 <- loadData(fileName = "data//New4Cases//ALL10K.csv");
plot(dataf2)
plot(dataf2$UTILITY_INCREASE)
dataf <- loadData(fileName = "data//New4Cases//Saturating10K.csv");
plot(dataf$UTILITY_INCREASE)
plot(dataf2$UTILITY_INCREASE)+ title("ALL10K")
plot(dataf$UTILITY_INCREASE) + title("Saturating10K")
dim(dataf$UTILITY_INCREASE<500)
length(dataf$UTILITY_INCREASE<500)
length(dataf$UTILITY_INCREASE)
length(dataf[dataf$UTILITY_INCREASE<500,])
dim(dataf[dataf$UTILITY_INCREASE<500,])
dim(dataf2[dataf2$UTILITY_INCREASE<500,])
length(dataf2$UTILITY_INCREASE)
