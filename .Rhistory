validation.df <-as.data.frame(features.df[startTestIndex:totalData.size,]);
#Train model
numberOfTrees=5000;
kfolds=10;
outcome.list <- trainGBM(training.df,numberOfTrees,kfolds);
#Validate model
results.df <- validateGBM(outcome.list,validation.df,dataset.name.list,i,results.df,nodes);
}
#print(results.df); #show on the console
message <- resultsToFile(results.df,model.name,method.name,"_70-30_NOFeatureSelection.csv"); #save to a .csv file
print(message);
#Load utility functions
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//loadData.R");
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//xboostRegression.R");
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//gbmRegression.R");
#Data structure to keep results
#Folder with training data
folder <- "C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//data//DataPoints_1K-3K-9K//";
#folder <- "//DataPoints_1K-3K-9K//";
# CONTROL CODE   ------------------------------------------------------------
model.name <- c("Linear","Discontinuous","Saturating","ALL")[1];
method.name <- c("GBM","XGBoost","LigthGBM")[1];
dataset.name.list <- generateDataSetNames(model.name, c("1K","3K","9K"),0);
results.df <- data.frame(matrix(data=NA,nrow=3,ncol=9));
colnames(results.df) <- c("Item","Utility_Type","RMSE","R_Squared", "MAPD","User_Time","Sys_Time","Elapsed_Time","Number_of_Trees","Leaf_Nodes");
results_line <- 0;
for(i in c(1:length(dataset.name.list))){
#for(nodes in c(1:10)){
# i <- 1
# results_line <- results_line+1;
fileName <- paste0(folder,dataset.name.list[i],".csv");
data.df <- loadData(fileName);
features.df <- prepareFeatures(data.df,"ALL");
#Extract training ad validation sets
totalData.size <- dim(features.df)[1];
training.size <- trunc(totalData.size * 0.7);
startTestIndex <- totalData.size - training.size;
training.df <- as.data.frame(features.df[1:training.size,]);
validation.df <-as.data.frame(features.df[startTestIndex:totalData.size,]);
#Train model
numberOfTrees=5000;
kfolds=10;
outcome.list <- trainGBM(training.df,numberOfTrees,kfolds);
#Validate model
results.df <- validateGBM(outcome.list,validation.df,dataset.name.list,i,results.df);
}
#Load utility functions
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//loadData.R");
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//xboostRegression.R");
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//gbmRegression.R");
#Data structure to keep results
#Folder with training data
folder <- "C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//data//DataPoints_1K-3K-9K//";
#folder <- "//DataPoints_1K-3K-9K//";
# CONTROL CODE   ------------------------------------------------------------
model.name <- c("Linear","Discontinuous","Saturating","ALL")[1];
method.name <- c("GBM","XGBoost","LigthGBM")[1];
dataset.name.list <- generateDataSetNames(model.name, c("1K","3K","9K"),0);
results.df <- data.frame(matrix(data=NA,nrow=3,ncol=9));
colnames(results.df) <- c("Item","Utility_Type","RMSE","R_Squared", "MAPD","User_Time","Sys_Time","Elapsed_Time","Number_of_Trees","Leaf_Nodes");
results_line <- 0;
for(i in c(1:length(dataset.name.list))){
#for(nodes in c(1:10)){
# i <- 1
# results_line <- results_line+1;
fileName <- paste0(folder,dataset.name.list[i],".csv");
data.df <- loadData(fileName);
features.df <- prepareFeatures(data.df,"ALL");
#Extract training ad validation sets
totalData.size <- dim(features.df)[1];
training.size <- trunc(totalData.size * 0.7);
startTestIndex <- totalData.size - training.size;
training.df <- as.data.frame(features.df[1:training.size,]);
validation.df <-as.data.frame(features.df[startTestIndex:totalData.size,]);
#Train model
numberOfTrees=5000;
kfolds=10;
outcome.list <- trainGBM(training.df,numberOfTrees,kfolds);
#Validate model
results.df <- validateGBM(outcome.list,validation.df,dataset.name.list,i,results.df);
}
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//loadData.R");
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//xboostRegression.R");
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//gbmRegression.R");
#Data structure to keep results
#Folder with training data
folder <- "C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//data//DataPoints_1K-3K-9K//";
#folder <- "//DataPoints_1K-3K-9K//";
# CONTROL CODE   ------------------------------------------------------------
model.name <- c("Linear","Discontinuous","Saturating","ALL")[1];
method.name <- c("GBM","XGBoost","LigthGBM")[1];
dataset.name.list <- generateDataSetNames(model.name, c("1K","3K","9K"),0);
results.df <- data.frame(matrix(data=NA,nrow=3,ncol=9));
colnames(results.df) <- c("Item","Utility_Type","RMSE","R_Squared", "MAPD","User_Time","Sys_Time","Elapsed_Time","Number_of_Trees");
results_line <- 0;
for(i in c(1:length(dataset.name.list))){
#for(nodes in c(1:10)){
# i <- 1
# results_line <- results_line+1;
fileName <- paste0(folder,dataset.name.list[i],".csv");
data.df <- loadData(fileName);
features.df <- prepareFeatures(data.df,"ALL");
#Extract training ad validation sets
totalData.size <- dim(features.df)[1];
training.size <- trunc(totalData.size * 0.7);
startTestIndex <- totalData.size - training.size;
training.df <- as.data.frame(features.df[1:training.size,]);
validation.df <-as.data.frame(features.df[startTestIndex:totalData.size,]);
#Train model
numberOfTrees=5000;
kfolds=10;
outcome.list <- trainGBM(training.df,numberOfTrees,kfolds);
#Validate model
results.df <- validateGBM(outcome.list,validation.df,dataset.name.list,i,results.df);
}
message <- resultsToFile(results.df,model.name,method.name,"_70-30_NOFeatureSelection.csv"); #save to a .csv file
print(message);
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//loadData.R");
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//xboostRegression.R");
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//gbmRegression.R");
#Data structure to keep results
#Folder with training data
folder <- "C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//data//DataPoints_1K-3K-9K//";
#folder <- "//DataPoints_1K-3K-9K//";
# CONTROL CODE   ------------------------------------------------------------
model.name <- c("Linear","Discontinuous","Saturating","ALL")[2];
method.name <- c("GBM","XGBoost","LigthGBM")[1];
dataset.name.list <- generateDataSetNames(model.name, c("1K","3K","9K"),0);
results.df <- data.frame(matrix(data=NA,nrow=3,ncol=9));
colnames(results.df) <- c("Item","Utility_Type","RMSE","R_Squared", "MAPD","User_Time","Sys_Time","Elapsed_Time","Number_of_Trees");
results_line <- 0;
for(i in c(1:length(dataset.name.list))){
#for(nodes in c(1:10)){
# i <- 1
# results_line <- results_line+1;
fileName <- paste0(folder,dataset.name.list[i],".csv");
data.df <- loadData(fileName);
features.df <- prepareFeatures(data.df,"ALL");
#Extract training ad validation sets
totalData.size <- dim(features.df)[1];
training.size <- trunc(totalData.size * 0.7);
startTestIndex <- totalData.size - training.size;
training.df <- as.data.frame(features.df[1:training.size,]);
validation.df <-as.data.frame(features.df[startTestIndex:totalData.size,]);
#Train model
numberOfTrees=5000;
kfolds=10;
outcome.list <- trainGBM(training.df,numberOfTrees,kfolds);
#Validate model
results.df <- validateGBM(outcome.list,validation.df,dataset.name.list,i,results.df);
}
#print(results.df); #show on the console
message <- resultsToFile(results.df,model.name,method.name,"_70-30_NOFeatureSelection.csv"); #save to a .csv file
print(message);
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//loadData.R");
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//xboostRegression.R");
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//gbmRegression.R");
#Data structure to keep results
#Folder with training data
folder <- "C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//data//DataPoints_1K-3K-9K//";
#folder <- "//DataPoints_1K-3K-9K//";
# CONTROL CODE   ------------------------------------------------------------
model.name <- c("Linear","Discontinuous","Saturating","ALL")[2];
method.name <- c("GBM","XGBoost","LigthGBM")[1];
dataset.name.list <- generateDataSetNames(model.name, c("1K","3K","9K"),0);
results.df <- data.frame(matrix(data=NA,nrow=3,ncol=9));
colnames(results.df) <- c("Item","Utility_Type","RMSE","R_Squared", "MAPD","User_Time","Sys_Time","Elapsed_Time","Number_of_Trees");
results_line <- 0;
for(i in c(1:length(dataset.name.list))){
#for(nodes in c(1:10)){
# i <- 1
# results_line <- results_line+1;
fileName <- paste0(folder,dataset.name.list[i],".csv");
data.df <- loadData(fileName);
features.df <- prepareFeatures(data.df,"ALL");
#Extract training ad validation sets
totalData.size <- dim(features.df)[1];
training.size <- trunc(totalData.size * 0.7);
startTestIndex <- totalData.size - training.size;
training.df <- as.data.frame(features.df[1:training.size,]);
validation.df <-as.data.frame(features.df[startTestIndex:totalData.size,]);
#Train model
numberOfTrees=5000;
kfolds=10;
outcome.list <- trainGBM(training.df,numberOfTrees,kfolds);
#Validate model
results.df <- validateGBM(outcome.list,validation.df,dataset.name.list,i,results.df);
}
#print(results.df); #show on the console
message <- resultsToFile(results.df,model.name,method.name,"_70-30_NOFeatureSelection.csv"); #save to a .csv file
print(message);
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//loadData.R");
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//xboostRegression.R");
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//gbmRegression.R");
#Data structure to keep results
#Folder with training data
folder <- "C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//data//DataPoints_1K-3K-9K//";
#folder <- "//DataPoints_1K-3K-9K//";
# CONTROL CODE   ------------------------------------------------------------
model.name <- c("Linear","Discontinuous","Saturating","ALL")[3];
method.name <- c("GBM","XGBoost","LigthGBM")[1];
dataset.name.list <- generateDataSetNames(model.name, c("1K","3K","9K"),0);
results.df <- data.frame(matrix(data=NA,nrow=3,ncol=9));
colnames(results.df) <- c("Item","Utility_Type","RMSE","R_Squared", "MAPD","User_Time","Sys_Time","Elapsed_Time","Number_of_Trees");
results_line <- 0;
for(i in c(1:length(dataset.name.list))){
#for(nodes in c(1:10)){
# i <- 1
# results_line <- results_line+1;
fileName <- paste0(folder,dataset.name.list[i],".csv");
data.df <- loadData(fileName);
features.df <- prepareFeatures(data.df,"ALL");
#Extract training ad validation sets
totalData.size <- dim(features.df)[1];
training.size <- trunc(totalData.size * 0.7);
startTestIndex <- totalData.size - training.size;
training.df <- as.data.frame(features.df[1:training.size,]);
validation.df <-as.data.frame(features.df[startTestIndex:totalData.size,]);
#Train model
numberOfTrees=5000;
kfolds=10;
outcome.list <- trainGBM(training.df,numberOfTrees,kfolds);
#Validate model
results.df <- validateGBM(outcome.list,validation.df,dataset.name.list,i,results.df);
}
#print(results.df); #show on the console
message <- resultsToFile(results.df,model.name,method.name,"_70-30_NOFeatureSelection.csv"); #save to a .csv file
print(message);
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//loadData.R");
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//xboostRegression.R");
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//gbmRegression.R");
#Data structure to keep results
#Folder with training data
folder <- "C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//data//DataPoints_1K-3K-9K//";
#folder <- "//DataPoints_1K-3K-9K//";
# CONTROL CODE   ------------------------------------------------------------
model.name <- c("Linear","Discontinuous","Saturating","ALL")[4];
method.name <- c("GBM","XGBoost","LigthGBM")[1];
dataset.name.list <- generateDataSetNames(model.name, c("1K","3K","9K"),0);
results.df <- data.frame(matrix(data=NA,nrow=3,ncol=9));
colnames(results.df) <- c("Item","Utility_Type","RMSE","R_Squared", "MAPD","User_Time","Sys_Time","Elapsed_Time","Number_of_Trees");
results_line <- 0;
for(i in c(1:length(dataset.name.list))){
#for(nodes in c(1:10)){
# i <- 1
# results_line <- results_line+1;
fileName <- paste0(folder,dataset.name.list[i],".csv");
data.df <- loadData(fileName);
features.df <- prepareFeatures(data.df,"ALL");
#Extract training ad validation sets
totalData.size <- dim(features.df)[1];
training.size <- trunc(totalData.size * 0.7);
startTestIndex <- totalData.size - training.size;
training.df <- as.data.frame(features.df[1:training.size,]);
validation.df <-as.data.frame(features.df[startTestIndex:totalData.size,]);
#Train model
numberOfTrees=5000;
kfolds=10;
outcome.list <- trainGBM(training.df,numberOfTrees,kfolds);
#Validate model
results.df <- validateGBM(outcome.list,validation.df,dataset.name.list,i,results.df);
}
#print(results.df); #show on the console
message <- resultsToFile(results.df,model.name,method.name,"_70-30_NOFeatureSelection.csv"); #save to a .csv file
print(message);
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//loadData.R");
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//xboostRegression.R");
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//gbmRegression.R");
#Data structure to keep results
#Folder with training data
folder <- "C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//data//DataPoints_1K-3K-9K//";
#folder <- "//DataPoints_1K-3K-9K//";
# CONTROL CODE   ------------------------------------------------------------
model.name <- c("Linear","Discontinuous","Saturating","ALL")[4];
method.name <- c("GBM","XGBoost","LigthGBM")[1];
dataset.name.list <- generateDataSetNames(model.name, c("1K","3K","9K"),0);
results.df <- data.frame(matrix(data=NA,nrow=3,ncol=9));
colnames(results.df) <- c("Item","Utility_Type","RMSE","R_Squared", "MAPD","User_Time","Sys_Time","Elapsed_Time","Number_of_Trees");
results_line <- 0;
#for(i in c(1:length(dataset.name.list))){
#for(nodes in c(1:10)){
i <- 3
# results_line <- results_line+1;
fileName <- paste0(folder,dataset.name.list[3],".csv");
data.df <- loadData(fileName);
features.df <- prepareFeatures(data.df,"ALL");
#Extract training ad validation sets
totalData.size <- dim(features.df)[1];
training.size <- trunc(totalData.size * 0.7);
startTestIndex <- totalData.size - training.size;
training.df <- as.data.frame(features.df[1:training.size,]);
validation.df <-as.data.frame(features.df[startTestIndex:totalData.size,]);
#Train model
numberOfTrees=5000;
kfolds=10;
outcome.list <- trainGBM(training.df,numberOfTrees,kfolds);
#Validate model
results.df <- validateGBM(outcome.list,validation.df,dataset.name.list,i,results.df);
pmmlFileName <- paste0(".//pmml///",dataset.name.list[i],"-",method.name,".pmml");
generatePMML(outcome.list[[1]],training.df,pmmlFileName,numberOfTrees);#datasetName[length(datasetName)]);
pmmlFileName
#Load utility functions
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//loadData.R");
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//xboostRegression.R");
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//gbmRegression.R");
#Data structure to keep results
#Folder with training data
folder <- "C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//data//DataPoints_1K-3K-9K//";
#folder <- "//DataPoints_1K-3K-9K//";
# CONTROL CODE   ------------------------------------------------------------
model.name <- c("Linear","Discontinuous","Saturating","ALL")[1];
method.name <- c("GBM","XGBoost","LigthGBM")[1];
dataset.name.list <- generateDataSetNames(model.name, c("1K","3K","9K"),0);
results.df <- data.frame(matrix(data=NA,nrow=3,ncol=9));
colnames(results.df) <- c("Item","Utility_Type","RMSE","R_Squared", "MAPD","User_Time","Sys_Time","Elapsed_Time","Number_of_Trees");
results_line <- 0;
#for(i in c(1:length(dataset.name.list))){
#for(nodes in c(1:10)){
i <- 3
# results_line <- results_line+1;
fileName <- paste0(folder,dataset.name.list[3],".csv");
data.df <- loadData(fileName);
features.df <- prepareFeatures(data.df,"ALL");
#Extract training ad validation sets
totalData.size <- dim(features.df)[1];
training.size <- trunc(totalData.size * 0.7);
startTestIndex <- totalData.size - training.size;
training.df <- as.data.frame(features.df[1:training.size,]);
validation.df <-as.data.frame(features.df[startTestIndex:totalData.size,]);
#Train model
numberOfTrees=5000;
kfolds=10;
outcome.list <- trainGBM(training.df,numberOfTrees,kfolds);
#Validate model
results.df <- validateGBM(outcome.list,validation.df,dataset.name.list,i,results.df);
#}
pmmlFileName <- paste0(".//pmml///",dataset.name.list[i],"-",method.name,".pmml");
generatePMML(outcome.list[[1]],training.df,pmmlFileName,numberOfTrees);#datasetName[length(datasetName)]);
pmmlFileName
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//loadData.R");
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//xboostRegression.R");
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//gbmRegression.R");
#Data structure to keep results
#Folder with training data
folder <- "C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//data//DataPoints_1K-3K-9K//";
#folder <- "//DataPoints_1K-3K-9K//";
# CONTROL CODE   ------------------------------------------------------------
model.name <- c("Linear","Discontinuous","Saturating","ALL")[3];
method.name <- c("GBM","XGBoost","LigthGBM")[1];
dataset.name.list <- generateDataSetNames(model.name, c("1K","3K","9K"),0);
results.df <- data.frame(matrix(data=NA,nrow=3,ncol=9));
colnames(results.df) <- c("Item","Utility_Type","RMSE","R_Squared", "MAPD","User_Time","Sys_Time","Elapsed_Time","Number_of_Trees");
results_line <- 0;
#for(i in c(1:length(dataset.name.list))){
#for(nodes in c(1:10)){
i <- 3
# results_line <- results_line+1;
fileName <- paste0(folder,dataset.name.list[3],".csv");
data.df <- loadData(fileName);
features.df <- prepareFeatures(data.df,"ALL");
#Extract training ad validation sets
totalData.size <- dim(features.df)[1];
training.size <- trunc(totalData.size * 0.7);
startTestIndex <- totalData.size - training.size;
training.df <- as.data.frame(features.df[1:training.size,]);
validation.df <-as.data.frame(features.df[startTestIndex:totalData.size,]);
#Train model
numberOfTrees=5000;
kfolds=10;
outcome.list <- trainGBM(training.df,numberOfTrees,kfolds);
#Validate model
results.df <- validateGBM(outcome.list,validation.df,dataset.name.list,i,results.df);
#}
pmmlFileName <- paste0(".//pmml///",dataset.name.list[i],"-",method.name,".pmml");
generatePMML(outcome.list[[1]],training.df,pmmlFileName,numberOfTrees);#datasetName[length(datasetName)]);
pmmlFileName
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//loadData.R");
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//xboostRegression.R");
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//gbmRegression.R");
#Data structure to keep results
#Folder with training data
folder <- "C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//data//DataPoints_1K-3K-9K//";
#folder <- "//DataPoints_1K-3K-9K//";
# CONTROL CODE   ------------------------------------------------------------
model.name <- c("Linear","Discontinuous","Saturating","ALL")[2];
method.name <- c("GBM","XGBoost","LigthGBM")[1];
dataset.name.list <- generateDataSetNames(model.name, c("1K","3K","9K"),0);
results.df <- data.frame(matrix(data=NA,nrow=3,ncol=9));
colnames(results.df) <- c("Item","Utility_Type","RMSE","R_Squared", "MAPD","User_Time","Sys_Time","Elapsed_Time","Number_of_Trees");
results_line <- 0;
#for(i in c(1:length(dataset.name.list))){
#for(nodes in c(1:10)){
i <- 3
# results_line <- results_line+1;
fileName <- paste0(folder,dataset.name.list[3],".csv");
data.df <- loadData(fileName);
features.df <- prepareFeatures(data.df,"ALL");
#Extract training ad validation sets
totalData.size <- dim(features.df)[1];
training.size <- trunc(totalData.size * 0.7);
startTestIndex <- totalData.size - training.size;
training.df <- as.data.frame(features.df[1:training.size,]);
validation.df <-as.data.frame(features.df[startTestIndex:totalData.size,]);
#Train model
numberOfTrees=5000;
kfolds=10;
outcome.list <- trainGBM(training.df,numberOfTrees,kfolds);
#Validate model
results.df <- validateGBM(outcome.list,validation.df,dataset.name.list,i,results.df);
#}
pmmlFileName <- paste0(".//pmml///",dataset.name.list[i],"-",method.name,".pmml");
generatePMML(outcome.list[[1]],training.df,pmmlFileName,numberOfTrees);#datasetName[length(datasetName)]);
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//loadData.R");
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//xboostRegression.R");
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//gbmRegression.R");
#Data structure to keep results
#Folder with training data
folder <- "C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//data//DataPoints_1K-3K-9K//";
#folder <- "//DataPoints_1K-3K-9K//";
# CONTROL CODE   ------------------------------------------------------------
model.name <- c("Linear","Discontinuous","Saturating","ALL")[1];
method.name <- c("GBM","XGBoost","LigthGBM")[1];
dataset.name.list <- generateDataSetNames(model.name, c("1K","3K","9K"),0);
results.df <- data.frame(matrix(data=NA,nrow=3,ncol=9));
colnames(results.df) <- c("Item","Utility_Type","RMSE","R_Squared", "MAPD","User_Time","Sys_Time","Elapsed_Time","Number_of_Trees");
results_line <- 0;
#for(i in c(1:length(dataset.name.list))){
#for(nodes in c(1:10)){
i <- 1
# results_line <- results_line+1;
fileName <- paste0(folder,dataset.name.list[i],".csv");
data.df <- loadData(fileName);
features.df <- prepareFeatures(data.df,"ALL");
#Extract training and validation sets
totalData.size <- dim(features.df)[1];
training.size <- trunc(totalData.size * 0.7);
startTestIndex <- totalData.size - training.size;
training.df <- as.data.frame(features.df[1:training.size,]);
validation.df <-as.data.frame(features.df[startTestIndex:totalData.size,]);
#Train model
numberOfTrees=500;
kfolds=10;
outcome.list <- trainLightGBM(training.df,numberOfTrees,kfolds);
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//lighGbmRegression.R");
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//lighGmRegression.R");
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//lighGbmRegression.R");
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//lightGbmRegression.R");
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//lightGbmRegression.R");
#Data structure to keep results
#Folder with training data
folder <- "C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//data//DataPoints_1K-3K-9K//";
#folder <- "//DataPoints_1K-3K-9K//";
# CONTROL CODE   ------------------------------------------------------------
model.name <- c("Linear","Discontinuous","Saturating","ALL")[1];
method.name <- c("GBM","XGBoost","LigthGBM")[3];
dataset.name.list <- generateDataSetNames(model.name, c("1K","3K","9K"),0);
results.df <- data.frame(matrix(data=NA,nrow=3,ncol=9));
colnames(results.df) <- c("Item","Utility_Type","RMSE","R_Squared", "MAPD","User_Time","Sys_Time","Elapsed_Time","Number_of_Trees");
results_line <- 0;
#for(i in c(1:length(dataset.name.list))){
#for(nodes in c(1:10)){
i <- 1
# results_line <- results_line+1;
fileName <- paste0(folder,dataset.name.list[i],".csv");
data.df <- loadData(fileName);
features.df <- prepareFeatures(data.df,"ALL");
#Extract training and validation sets
totalData.size <- dim(features.df)[1];
training.size <- trunc(totalData.size * 0.7);
startTestIndex <- totalData.size - training.size;
training.df <- as.data.frame(features.df[1:training.size,]);
validation.df <-as.data.frame(features.df[startTestIndex:totalData.size,]);
#Train model
numberOfTrees=500;
kfolds=10;
outcome.list <- trainLightGBM(training.df,numberOfTrees,kfolds);
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//lightGbmRegression.R");
#Data structure to keep results
#Folder with training data
folder <- "C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//data//DataPoints_1K-3K-9K//";
#folder <- "//DataPoints_1K-3K-9K//";
# CONTROL CODE   ------------------------------------------------------------
model.name <- c("Linear","Discontinuous","Saturating","ALL")[1];
method.name <- c("GBM","XGBoost","LigthGBM")[3];
dataset.name.list <- generateDataSetNames(model.name, c("1K","3K","9K"),0);
results.df <- data.frame(matrix(data=NA,nrow=3,ncol=9));
colnames(results.df) <- c("Item","Utility_Type","RMSE","R_Squared", "MAPD","User_Time","Sys_Time","Elapsed_Time","Number_of_Trees");
results_line <- 0;
#for(i in c(1:length(dataset.name.list))){
#for(nodes in c(1:10)){
i <- 1
# results_line <- results_line+1;
fileName <- paste0(folder,dataset.name.list[i],".csv");
data.df <- loadData(fileName);
features.df <- prepareFeatures(data.df,"ALL");
#Extract training and validation sets
totalData.size <- dim(features.df)[1];
training.size <- trunc(totalData.size * 0.7);
startTestIndex <- totalData.size - training.size;
training.df <- as.data.frame(features.df[1:training.size,]);
validation.df <-as.data.frame(features.df[startTestIndex:totalData.size,]);
#Train model
numberOfTrees=500;
kfolds=10;
outcome.list <- trainLightGBM(training.df,numberOfTrees,kfolds);
install.packages("lgbm")
install.packages("lightgbm")
install.packages("lightgbm")
library(lightgbm, quietly=TRUE)
install_git("git://github.com/Microsoft/LightGBM")
install_github("Microsoft/LightGBM", subdir = "R-package")
library(lightgbm, quietly=TRUE)
