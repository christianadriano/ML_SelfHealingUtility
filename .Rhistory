training.df <- as.data.frame(features.df[1:training.size,]);
validation.df <-as.data.frame(features.df[startTestIndex:totalData.size,]);
#For lightGBM, need a testing set.
trainingTest.list <- extractTrainingTesting(training.df);
#Train model
numberOfTrees=500;
kfolds=10;
outcome.list <- train_LightGBM(training=trainingTest.list[1],testing=trainingTest.list[2],numberOfTrees,kfolds);
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//lightGbmRegression.R");
#Data structure to keep results
#Folder with training data
folder <- "C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//data//DataPoints_1K-3K-9K//";
#folder <- "//DataPoints_1K-3K-9K//";
# CONTROL CODE   ------------------------------------------------------------
model.name <- c("Linear","Discontinuous","Saturating","ALL")[1];
method.name <- c("GBM","XGBoost","LigthGBM")[3];
dataset.name.list <- generateDataSetNames(model.name, c("1K","3K","9K"),0);
results.df <- data.frame(matrix(data=NA,nrow=3,ncol=9));
colnames(results.df) <- c("Item","Utility_Type","RMSE","R_Squared", "MAPD","User_Time","Sys_Time","Elapsed_Time","Number_of_Trees");
results_line <- 0;
#for(i in c(1:length(dataset.name.list))){
#for(nodes in c(1:10)){
i <- 1
# results_line <- results_line+1;
fileName <- paste0(folder,dataset.name.list[i],".csv");
data.df <- loadData(fileName);
features.df <- prepareFeatures(data.df,"ALL");
#Extract training and validation sets
totalData.size <- dim(features.df)[1];
training.size <- trunc(totalData.size * 0.7);
startTestIndex <- totalData.size - training.size;
training.df <- as.data.frame(features.df[1:training.size,]);
validation.df <-as.data.frame(features.df[startTestIndex:totalData.size,]);
#For lightGBM, need a testing set.
trainingTest.list <- extractTrainingTesting(training.df);
#Train model
numberOfTrees=500;
kfolds=10;
outcome.list <- train_LightGBM(train_df=trainingTest.list[1],test_df=trainingTest.list[2],numberOfTrees,kfolds);
training.df
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//lightGbmRegression.R");
#Data structure to keep results
#Folder with training data
folder <- "C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//data//DataPoints_1K-3K-9K//";
#folder <- "//DataPoints_1K-3K-9K//";
# CONTROL CODE   ------------------------------------------------------------
model.name <- c("Linear","Discontinuous","Saturating","ALL")[1];
method.name <- c("GBM","XGBoost","LigthGBM")[3];
dataset.name.list <- generateDataSetNames(model.name, c("1K","3K","9K"),0);
results.df <- data.frame(matrix(data=NA,nrow=3,ncol=9));
colnames(results.df) <- c("Item","Utility_Type","RMSE","R_Squared", "MAPD","User_Time","Sys_Time","Elapsed_Time","Number_of_Trees");
results_line <- 0;
#for(i in c(1:length(dataset.name.list))){
#for(nodes in c(1:10)){
i <- 1
# results_line <- results_line+1;
fileName <- paste0(folder,dataset.name.list[i],".csv");
data.df <- loadData(fileName);
features.df <- prepareFeatures(data.df,"ALL");
#Extract training and validation sets
totalData.size <- dim(features.df)[1];
training.size <- trunc(totalData.size * 0.7);
startTestIndex <- totalData.size - training.size;
training.df <- as.data.frame(features.df[1:training.size,]);
validation.df <-as.data.frame(features.df[startTestIndex:totalData.size,]);
#For lightGBM, need a testing set.
trainingTest.list <- extractTrainingTesting(training.df);
#Train model
numberOfTrees=500;
kfolds=10;
outcome.list <- train_LightGBM(train_df=trainingTest.list[1],test_df=trainingTest.list[2],numberOfTrees,kfolds);
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//lightGbmRegression.R");
#Folder with training data
folder <- "C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//data//DataPoints_1K-3K-9K//";
model.name <- c("Linear","Discontinuous","Saturating","ALL")[1];
dataset.name.list <- generateDataSetNames(model.name, c("1K","3K","9K"),0);
results.df <- data.frame(matrix(data=NA,nrow=3,ncol=9));
colnames(results.df) <- c("Item","Utility_Type","RMSE","R_Squared", "MAPD","User_Time","Sys_Time","Elapsed_Time","Number_of_Trees");
results_line <- 0;
method.name <- c("GBM","XGBoost","LigthGBM")[3];
# results_line <- results_line+1;
fileName <- paste0(folder,dataset.name.list[i],".csv");
#for(i in c(1:length(dataset.name.list))){
#for(nodes in c(1:10)){
i <- 1
data.df <- loadData(fileName);
features.df <- prepareFeatures(data.df,"ALL");
#Extract training and validation sets
totalData.size <- dim(features.df)[1];
training.size <- trunc(totalData.size * 0.7);
startTestIndex <- totalData.size - training.size;
training.df <- as.data.frame(features.df[1:training.size,]);
validation.df <-as.data.frame(features.df[startTestIndex:totalData.size,]);
browser();
#For lightGBM, need a testing set.
trainingTest.list <- extractTrainingTesting(training.df);
View(test.df)
View(test.df)
View(train.df)
View(test.df)
dim(test.df)
dim(train.df)
train.size
startTestIndex
test <- data.df[startTestIndex:totalData.size,]
testa <- data.df[74:738,];
testa <- data.df[74:78,];
testa <- data.df[74:737,];
testa
test.df <-as.data.frame(data.df[startTestIndex:totalData.size-1,]);
test.df
test.df <-as.data.frame(data.df[startTestIndex:totalData.size-1,]);
totalData.size-1
startTestIndex
testa <- data.df[74:737,];
dim(testa)
testa <- data.df[74:736,];
dim(testa)
train.size <- trunc(totalData.size * 0.9);
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//loadData.R");
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//xboostRegression.R");
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//gbmRegression.R");
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//lightGbmRegression.R");
#Data structure to keep results
#Folder with training data
folder <- "C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//data//DataPoints_1K-3K-9K//";
#folder <- "//DataPoints_1K-3K-9K//";
# CONTROL CODE   ------------------------------------------------------------
model.name <- c("Linear","Discontinuous","Saturating","ALL")[1];
method.name <- c("GBM","XGBoost","LigthGBM")[3];
dataset.name.list <- generateDataSetNames(model.name, c("1K","3K","9K"),0);
results.df <- data.frame(matrix(data=NA,nrow=3,ncol=9));
colnames(results.df) <- c("Item","Utility_Type","RMSE","R_Squared", "MAPD","User_Time","Sys_Time","Elapsed_Time","Number_of_Trees");
results_line <- 0;
#for(i in c(1:length(dataset.name.list))){
#for(nodes in c(1:10)){
i <- 1
# results_line <- results_line+1;
fileName <- paste0(folder,dataset.name.list[i],".csv");
data.df <- loadData(fileName);
features.df <- prepareFeatures(data.df,"ALL");
#Extract training and validation sets
totalData.size <- dim(features.df)[1];
training.size <- trunc(totalData.size * 0.7);
endValidationIndex <- totalData.size - training.size;
validation.df <-as.data.frame(data.df[1:endValidationIndex,]);
training.df <- as.data.frame(data.df[endValidationIndex+1:totalData.size,]);
#For lightGBM, need a testing set.
trainingTest.list <- extractTrainingTesting(training.df);
#Train model
numberOfTrees=500;
kfolds=10;
outcome.list <- train_LightGBM(train_df=trainingTest.list[1],test_df=trainingTest.list[2],
numberOfTrees,kfolds);
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//xboostRegression.R");
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//gbmRegression.R");
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//lightGbmRegression.R");
#Data structure to keep results
#Folder with training data
folder <- "C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//data//DataPoints_1K-3K-9K//";
#folder <- "//DataPoints_1K-3K-9K//";
# CONTROL CODE   ------------------------------------------------------------
model.name <- c("Linear","Discontinuous","Saturating","ALL")[1];
method.name <- c("GBM","XGBoost","LigthGBM")[3];
dataset.name.list <- generateDataSetNames(model.name, c("1K","3K","9K"),0);
results.df <- data.frame(matrix(data=NA,nrow=3,ncol=9));
colnames(results.df) <- c("Item","Utility_Type","RMSE","R_Squared", "MAPD","User_Time","Sys_Time","Elapsed_Time","Number_of_Trees");
results_line <- 0;
#for(i in c(1:length(dataset.name.list))){
#for(nodes in c(1:10)){
i <- 1
# results_line <- results_line+1;
fileName <- paste0(folder,dataset.name.list[i],".csv");
data.df <- loadData(fileName);
features.df <- prepareFeatures(data.df,"ALL");
#Extract training and validation sets
totalData.size <- dim(features.df)[1];
training.size <- trunc(totalData.size * 0.7);
endValidationIndex <- totalData.size - training.size;
validation.df <-as.data.frame(data.df[1:endValidationIndex,]);
training.df <- as.data.frame(data.df[endValidationIndex+1:totalData.size,]);
#For lightGBM, need a testing set.
trainingTest.list <- extractTrainingTesting(training.df);
#Train model
numberOfTrees=500;
kfolds=10;
outcome.list <- train_LightGBM(train_df=trainingTest.list[1],test_df=trainingTest.list[2],
numberOfTrees,kfolds);
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//gbmRegression.R");
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//lightGbmRegression.R");
#Data structure to keep results
#Folder with training data
folder <- "C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//data//DataPoints_1K-3K-9K//";
#folder <- "//DataPoints_1K-3K-9K//";
# CONTROL CODE   ------------------------------------------------------------
model.name <- c("Linear","Discontinuous","Saturating","ALL")[1];
method.name <- c("GBM","XGBoost","LigthGBM")[3];
dataset.name.list <- generateDataSetNames(model.name, c("1K","3K","9K"),0);
results.df <- data.frame(matrix(data=NA,nrow=3,ncol=9));
colnames(results.df) <- c("Item","Utility_Type","RMSE","R_Squared", "MAPD","User_Time","Sys_Time","Elapsed_Time","Number_of_Trees");
results_line <- 0;
#for(i in c(1:length(dataset.name.list))){
#for(nodes in c(1:10)){
i <- 1
# results_line <- results_line+1;
fileName <- paste0(folder,dataset.name.list[i],".csv");
data.df <- loadData(fileName);
features.df <- prepareFeatures(data.df,"ALL");
#Extract training and validation sets
totalData.size <- dim(features.df)[1];
training.size <- trunc(totalData.size * 0.7);
endValidationIndex <- totalData.size - training.size;
validation.df <-as.data.frame(data.df[1:endValidationIndex,]);
training.df <- as.data.frame(data.df[endValidationIndex+1:totalData.size,]);
#For lightGBM, need a testing set.
trainingTest.list <- extractTrainingTesting(training.df);
#Train model
numberOfTrees=500;
kfolds=10;
outcome.list <- train_LightGBM(train_df=trainingTest.list[1],test_df=trainingTest.list[2],
numberOfTrees,kfolds);
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//gbmRegression.R");
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//lightGbmRegression.R");
#Data structure to keep results
#Folder with training data
folder <- "C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//data//DataPoints_1K-3K-9K//";
#folder <- "//DataPoints_1K-3K-9K//";
# CONTROL CODE   ------------------------------------------------------------
model.name <- c("Linear","Discontinuous","Saturating","ALL")[1];
method.name <- c("GBM","XGBoost","LigthGBM")[3];
dataset.name.list <- generateDataSetNames(model.name, c("1K","3K","9K"),0);
results.df <- data.frame(matrix(data=NA,nrow=3,ncol=9));
colnames(results.df) <- c("Item","Utility_Type","RMSE","R_Squared", "MAPD","User_Time","Sys_Time","Elapsed_Time","Number_of_Trees");
results_line <- 0;
#for(i in c(1:length(dataset.name.list))){
#for(nodes in c(1:10)){
i <- 1
# results_line <- results_line+1;
fileName <- paste0(folder,dataset.name.list[i],".csv");
data.df <- loadData(fileName);
features.df <- prepareFeatures(data.df,"ALL");
#Extract training and validation sets
totalData.size <- dim(features.df)[1];
training.size <- trunc(totalData.size * 0.7);
endValidationIndex <- totalData.size - training.size;
validation.df <-as.data.frame(data.df[1:endValidationIndex,]);
training.df <- as.data.frame(data.df[endValidationIndex+1:totalData.size,]);
#For lightGBM, need a testing set.
trainingTest.list <- extractTrainingTesting(training.df);
#Train model
numberOfTrees=500;
kfolds=10;
outcome.list <- train_LightGBM(train_df=trainingTest.list[1],test_df=trainingTest.list[2],
numberOfTrees,kfolds);
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//gbmRegression.R");
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//lightGbmRegression.R");
#Data structure to keep results
#Folder with training data
folder <- "C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//data//DataPoints_1K-3K-9K//";
#folder <- "//DataPoints_1K-3K-9K//";
# CONTROL CODE   ------------------------------------------------------------
model.name <- c("Linear","Discontinuous","Saturating","ALL")[1];
method.name <- c("GBM","XGBoost","LigthGBM")[3];
dataset.name.list <- generateDataSetNames(model.name, c("1K","3K","9K"),0);
results.df <- data.frame(matrix(data=NA,nrow=3,ncol=9));
colnames(results.df) <- c("Item","Utility_Type","RMSE","R_Squared", "MAPD","User_Time","Sys_Time","Elapsed_Time","Number_of_Trees");
results_line <- 0;
#for(i in c(1:length(dataset.name.list))){
#for(nodes in c(1:10)){
i <- 1
# results_line <- results_line+1;
fileName <- paste0(folder,dataset.name.list[i],".csv");
data.df <- loadData(fileName);
features.df <- prepareFeatures(data.df,"ALL");
#Extract training and validation sets
totalData.size <- dim(features.df)[1];
training.size <- trunc(totalData.size * 0.7);
endValidationIndex <- totalData.size - training.size;
validation.df <-as.data.frame(data.df[1:endValidationIndex,]);
training.df <- as.data.frame(data.df[endValidationIndex+1:totalData.size,]);
#For lightGBM, need a testing set.
trainingTest.list <- extractTrainingTesting(training.df);
View(data.df)
data.df[1:2,]
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//gbmRegression.R");
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//lightGbmRegression.R");
#Data structure to keep results
#Folder with training data
folder <- "C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//data//DataPoints_1K-3K-9K//";
#folder <- "//DataPoints_1K-3K-9K//";
# CONTROL CODE   ------------------------------------------------------------
model.name <- c("Linear","Discontinuous","Saturating","ALL")[1];
method.name <- c("GBM","XGBoost","LigthGBM")[3];
dataset.name.list <- generateDataSetNames(model.name, c("1K","3K","9K"),0);
results.df <- data.frame(matrix(data=NA,nrow=3,ncol=9));
colnames(results.df) <- c("Item","Utility_Type","RMSE","R_Squared", "MAPD","User_Time","Sys_Time","Elapsed_Time","Number_of_Trees");
results_line <- 0;
#for(i in c(1:length(dataset.name.list))){
#for(nodes in c(1:10)){
i <- 1
# results_line <- results_line+1;
fileName <- paste0(folder,dataset.name.list[i],".csv");
data.df <- loadData(fileName);
features.df <- prepareFeatures(data.df,"ALL");
#Extract training and validation sets
totalData.size <- dim(features.df)[1];
training.size <- trunc(totalData.size * 0.7);
endValidationIndex <- totalData.size - training.size;
validation.df <-as.data.frame(data.df[1:endValidationIndex,]);
training.df <- as.data.frame(data.df[endValidationIndex+1:totalData.size,]);
#For lightGBM, need a testing set.
trainingTest.list <- extractTrainingTesting(training.df);
head(train.df)
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//gbmRegression.R");
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//lightGbmRegression.R");
#Data structure to keep results
#Folder with training data
folder <- "C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//data//DataPoints_1K-3K-9K//";
#folder <- "//DataPoints_1K-3K-9K//";
# CONTROL CODE   ------------------------------------------------------------
model.name <- c("Linear","Discontinuous","Saturating","ALL")[1];
method.name <- c("GBM","XGBoost","LigthGBM")[3];
dataset.name.list <- generateDataSetNames(model.name, c("1K","3K","9K"),0);
results.df <- data.frame(matrix(data=NA,nrow=3,ncol=9));
colnames(results.df) <- c("Item","Utility_Type","RMSE","R_Squared", "MAPD","User_Time","Sys_Time","Elapsed_Time","Number_of_Trees");
results_line <- 0;
#for(i in c(1:length(dataset.name.list))){
#for(nodes in c(1:10)){
i <- 1
# results_line <- results_line+1;
fileName <- paste0(folder,dataset.name.list[i],".csv");
data.df <- loadData(fileName);
features.df <- prepareFeatures(data.df,"ALL");
#Extract training and validation sets
totalData.size <- dim(features.df)[1];
training.size <- trunc(totalData.size * 0.7);
endValidationIndex <- totalData.size - training.size;
validation.df <-as.data.frame(data.df[1:endValidationIndex,]);
training.df <- as.data.frame(data.df[endValidationIndex+1:totalData.size,]);
#For lightGBM, need a testing set.
trainingTest.list <- extractTrainingTesting(training.df);
head(train.df)
features.df <- prepareFeatures(data.df,"ALL");
head(features.df)
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//gbmRegression.R");
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//lightGbmRegression.R");
#Data structure to keep results
#Folder with training data
folder <- "C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//data//DataPoints_1K-3K-9K//";
#folder <- "//DataPoints_1K-3K-9K//";
# CONTROL CODE   ------------------------------------------------------------
model.name <- c("Linear","Discontinuous","Saturating","ALL")[1];
method.name <- c("GBM","XGBoost","LigthGBM")[3];
dataset.name.list <- generateDataSetNames(model.name, c("1K","3K","9K"),0);
results.df <- data.frame(matrix(data=NA,nrow=3,ncol=9));
colnames(results.df) <- c("Item","Utility_Type","RMSE","R_Squared", "MAPD","User_Time","Sys_Time","Elapsed_Time","Number_of_Trees");
results_line <- 0;
#for(i in c(1:length(dataset.name.list))){
#for(nodes in c(1:10)){
i <- 1
# results_line <- results_line+1;
fileName <- paste0(folder,dataset.name.list[i],".csv");
data.df <- loadData(fileName);
features.df <- prepareFeatures(data.df,"ALL");
#Extract training and validation sets
totalData.size <- dim(features.df)[1];
training.size <- trunc(totalData.size * 0.7);
endValidationIndex <- totalData.size - training.size;
validation.df <-as.data.frame(features.df[1:endValidationIndex,]);
training.df <- as.data.frame(features.df[endValidationIndex+1:totalData.size,]);
#For lightGBM, need a testing set.
trainingTest.list <- extractTrainingTesting(training.df);
head(train.df)
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//gbmRegression.R");
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//lightGbmRegression.R");
#Data structure to keep results
#Folder with training data
folder <- "C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//data//DataPoints_1K-3K-9K//";
#folder <- "//DataPoints_1K-3K-9K//";
# CONTROL CODE   ------------------------------------------------------------
model.name <- c("Linear","Discontinuous","Saturating","ALL")[1];
method.name <- c("GBM","XGBoost","LigthGBM")[3];
dataset.name.list <- generateDataSetNames(model.name, c("1K","3K","9K"),0);
results.df <- data.frame(matrix(data=NA,nrow=3,ncol=9));
colnames(results.df) <- c("Item","Utility_Type","RMSE","R_Squared", "MAPD","User_Time","Sys_Time","Elapsed_Time","Number_of_Trees");
results_line <- 0;
#for(i in c(1:length(dataset.name.list))){
#for(nodes in c(1:10)){
i <- 1
# results_line <- results_line+1;
fileName <- paste0(folder,dataset.name.list[i],".csv");
data.df <- loadData(fileName);
features.df <- prepareFeatures(data.df,"ALL");
#Extract training and validation sets
totalData.size <- dim(features.df)[1];
training.size <- trunc(totalData.size * 0.7);
endValidationIndex <- totalData.size - training.size;
validation.df <-as.data.frame(features.df[1:endValidationIndex,]);
training.df <- as.data.frame(features.df[endValidationIndex+1:totalData.size,]);
dim(training.df)
dim(data.df)
training.size
training.df <-as.data.frame(features.df[1:training.size,]);
validation.df <- as.data.frame(features.df[training.size:totalData.size,]);
dim(training.df)
dim(validation.df)
738+318
training.df <-as.data.frame(features.df[1:training.size-1,]);
validation.df <- as.data.frame(features.df[training.size:totalData.size,]);
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//gbmRegression.R");
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//lightGbmRegression.R");
#Data structure to keep results
#Folder with training data
folder <- "C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//data//DataPoints_1K-3K-9K//";
#folder <- "//DataPoints_1K-3K-9K//";
# CONTROL CODE   ------------------------------------------------------------
model.name <- c("Linear","Discontinuous","Saturating","ALL")[1];
method.name <- c("GBM","XGBoost","LigthGBM")[3];
dataset.name.list <- generateDataSetNames(model.name, c("1K","3K","9K"),0);
results.df <- data.frame(matrix(data=NA,nrow=3,ncol=9));
colnames(results.df) <- c("Item","Utility_Type","RMSE","R_Squared", "MAPD","User_Time","Sys_Time","Elapsed_Time","Number_of_Trees");
results_line <- 0;
#for(i in c(1:length(dataset.name.list))){
#for(nodes in c(1:10)){
i <- 1
# results_line <- results_line+1;
fileName <- paste0(folder,dataset.name.list[i],".csv");
data.df <- loadData(fileName);
features.df <- prepareFeatures(data.df,"ALL");
#Extract training and validation sets
totalData.size <- dim(features.df)[1];
training.size <- trunc(totalData.size * 0.7);
#endValidationIndex <- totalData.size - training.size;
training.df <-as.data.frame(features.df[1:training.size-1,]);
validation.df <- as.data.frame(features.df[training.size:totalData.size,]);
#For lightGBM, need a testing set.
trainingTest.list <- extractTrainingTesting(training.df);
#Train model
numberOfTrees=500;
kfolds=10;
outcome.list <- train_LightGBM(train_df=trainingTest.list[1],test_df=trainingTest.list[2],
numberOfTrees,kfolds);
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//gbmRegression.R");
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//lightGbmRegression.R");
#Data structure to keep results
#Folder with training data
folder <- "C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//data//DataPoints_1K-3K-9K//";
#folder <- "//DataPoints_1K-3K-9K//";
# CONTROL CODE   ------------------------------------------------------------
model.name <- c("Linear","Discontinuous","Saturating","ALL")[1];
method.name <- c("GBM","XGBoost","LigthGBM")[3];
dataset.name.list <- generateDataSetNames(model.name, c("1K","3K","9K"),0);
results.df <- data.frame(matrix(data=NA,nrow=3,ncol=9));
colnames(results.df) <- c("Item","Utility_Type","RMSE","R_Squared", "MAPD","User_Time","Sys_Time","Elapsed_Time","Number_of_Trees");
results_line <- 0;
#for(i in c(1:length(dataset.name.list))){
#for(nodes in c(1:10)){
i <- 1
# results_line <- results_line+1;
fileName <- paste0(folder,dataset.name.list[i],".csv");
data.df <- loadData(fileName);
features.df <- prepareFeatures(data.df,"ALL");
#Extract training and validation sets
totalData.size <- dim(features.df)[1];
training.size <- trunc(totalData.size * 0.7);
#endValidationIndex <- totalData.size - training.size;
training.df <-as.data.frame(features.df[1:training.size-1,]);
validation.df <- as.data.frame(features.df[training.size:totalData.size,]);
#For lightGBM, need a testing set.
trainingTest.list <- extractTrainingTesting(training.df);
View(test.df)
View(train.df)
View(trainingTest.list)
#Train model
numberOfTrees=500;
kfolds=10;
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//lightGbmRegression.R");
outcome.list <- train_LightGBM(train_df=trainingTest.list[1],test_df=trainingTest.list[2],
numberOfTrees,kfolds);
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//gbmRegression.R");
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//lightGbmRegression.R");
#Data structure to keep results
#Folder with training data
folder <- "C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//data//DataPoints_1K-3K-9K//";
#folder <- "//DataPoints_1K-3K-9K//";
# CONTROL CODE   ------------------------------------------------------------
model.name <- c("Linear","Discontinuous","Saturating","ALL")[1];
method.name <- c("GBM","XGBoost","LigthGBM")[3];
dataset.name.list <- generateDataSetNames(model.name, c("1K","3K","9K"),0);
results.df <- data.frame(matrix(data=NA,nrow=3,ncol=9));
colnames(results.df) <- c("Item","Utility_Type","RMSE","R_Squared", "MAPD","User_Time","Sys_Time","Elapsed_Time","Number_of_Trees");
results_line <- 0;
#for(i in c(1:length(dataset.name.list))){
#for(nodes in c(1:10)){
i <- 1
# results_line <- results_line+1;
fileName <- paste0(folder,dataset.name.list[i],".csv");
data.df <- loadData(fileName);
features.df <- prepareFeatures(data.df,"ALL");
#Extract training and validation sets
totalData.size <- dim(features.df)[1];
training.size <- trunc(totalData.size * 0.7);
#endValidationIndex <- totalData.size - training.size;
training.df <-as.data.frame(features.df[1:training.size-1,]);
validation.df <- as.data.frame(features.df[training.size:totalData.size,]);
#For lightGBM, need a testing set.
trainingTest.list <- extractTrainingTesting(training.df);
#Train model
numberOfTrees=500;
kfolds=10;
outcome.list <- train_LightGBM(train_df=trainingTest.list[[1]],test_df=trainingTest.list[[2]],
numberOfTrees,kfolds);
