#Load utility functions
source("C://Users//chris//OneDrive//Documentos//GitHub//ML_SelfHealingUtility//loadData.R");
library(xgboost)
library(r2pmml) #https://github.com/jpmml/r2pmml
a <- {1.4, 2.5, 3.1, 5.5}
a <- c(1.4, 2.5, 3.1, 5.5)
b <- c(2.1, 3.9, 4.3, 6.7)
sd(a)
sd(b)
1/2*100
100 * 1/2
100 * 2/3
if ("package:h2o" %in% search()) { detach("package:h2o", unload=TRUE) }
if ("h2o" %in% rownames(installed.packages())) { remove.packages("h2o") }
pkgs <- c("RCurl","jsonlite")
for (pkg in pkgs) {
if (! (pkg %in% rownames(installed.packages()))) { install.packages(pkg) }
}
#Download and install the latest H2O package for R.
install.packages("h2o", type="source", repos=(c("http://h2o-release.s3.amazonaws.com/h2o/latest_stable_R")))
library(h2o)
h2o.init()
demo(h2o.kmeans)
install.packages("gbm")
install.packages("devtools")
install_git("git://github.com/jpmml/r2pmml.git")
#Load utility functions
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//loadData.R");
#Data structure to keep results
mcResultsf <- data.frame(matrix(data=NA,nrow=3,ncol=8));
colnames(mcResultsf) <- c("DataSet","Train_RMSE_MEAN","Train_RMSE_STD","Test_RMSE_MEAN",
"Test_RMSE_STD","RMSE","R_Squared", "MAPD");
#Folder with training data
folder <- "C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//data//DataPoints_1K-3K-9K//";
modelList <- c("Linear","Discontinuous","Saturating","ALL");
modelName <- modelList[1];
datasetSize <- c("1K","3K","9K");
datasetName <- generateDataSetNames(modelName,datasetSize,0);
# Generate the dataset names that will be trained ----------------------------
generateDataSetNames <- function(modelName,datasetSize,s_idx){
if(s_idx==0 & length(datasetSize)>0){#Generate for all sizes
datasetName <- paste0(modelName,datasetSize[1]);
for(i in c(2:length(datasetSize))){
datasetName <- cbind(datasetName,paste0(modelName,datasetSize[i]));
}
}
else{
datasetName <- paste0(modelName,datasetSize[s_idx]);
}
return(datasetName);
}
# Save results to file ----------------------------------------------------
resultsToFile <- function(mcResults,modelName,extension){
fileName <- paste0("mcResultsf_",modelName,extension);
write.table(mcResults,fileName,sep=",",col.names = TRUE);
print(paste0("file written:",fileName));
mcResults
}
# Prepare features --------------------------------------------------------
prepareFeatures <- function(dataf,selectionType){
#Do feature selection (or not)
if(selectionType=="ALL")
featuresdf<- select_ALL(dataf)
else
if(selectionType=="Linear")
featuresdf<- select_Linear(dataf)
else
if(selectionType=="Discontinuous")
featuresdf<- select_Discontinuous(dataf)
else
if(selectionType=="Saturating")
featuresdf<- select_Saturation(dataf)
#Remove zero utilities
featuresdf <- featuresdf[featuresdf$UTILITY_INCREASE!=0,];
# Scramble data
featuresdf <- scrambleData(datadf=featuresdf);
return (featuresdf);
}
library(devtools)
library(xgboost)
library(r2pmml) #https://github.com/jpmml/r2pmml
# Initialization section ------------------------------------------------------
#Load utility functions
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//loadData.R");
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//xboostRegression.R");
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//xboostRegression.R");
#Data structure to keep results
results.df <- data.frame(matrix(data=NA,nrow=3,ncol=12));
colnames(results.df) <- c("Item","Utility_Type","Train_RMSE_MEAN","Train_RMSE_STD","Test_RMSE_MEAN",
"Test_RMSE_STD","RMSE","R_Squared", "MAPD","User_Time","Sys_Time","Elapsed_Time");
#Folder with training data
folder <- "C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//data//DataPoints_1K-3K-9K//";
modelList <- c("Linear","Discontinuous","Saturating","ALL");
modelName <- modelList[1];
datasetSize <- c("1K","3K","9K");
datasetName <- generateDataSetNames(modelName,datasetSize,0);
#for(i in c(1:length(datasetName))){
i <- 1;
fileName <- paste0(folder,datasetName[i],".csv");
dataf <- loadData(fileName);
featuresdf <- prepareFeatures(dataf,"Saturating");
#Extract training ad validation sets
totalData = dim(featuresdf)[1];
trainingSize = trunc(totalData * 0.7);
startTestIndex = totalData - trainingSize;
trainingData<- as.data.frame(featuresdf[1:trainingSize,]);
validationData<-as.data.frame(featuresdf[startTestIndex:totalData,]);
#Train model
outcomeList <- trainModel(trainingData);
system.time(a<-1)
time.df <- data.frame(matrix(data=NA,nrow=1,ncol=3));
colnames(time.df) <- c("user.time","sys.time","elapsed.time");
time.df$user.time <- unlist(lapply(time, '[[', 1));
time.df$user.time <- unlist(lapply(time, '[[', 1));
time <- system.time(a<-1)
time.df <- data.frame(matrix(data=NA,nrow=1,ncol=3));
colnames(time.df) <- c("user.time","sys.time","elapsed.time");
time.df$user.time <- unlist(lapply(time, '[[', 1));
time.df <- data.frame(matrix(data=NA,nrow=1,ncol=3));
time.df$user.time <- unlist(lapply(time, '[[', 1));
time.df$sys.time <- unlist(lapply(time, '[[', 2));
time.df$elapsed.time <-unlist(lapply(time, '[[', 3));
unlist(lapply(time, '[[', 1));
unlist(lapply(time, '[[', 1))[1]
unlist(lapply(time, '[[', 1))[1,2]
unlist(lapply(time, '[[', 1))[1]
time <- system.time(a<-1)
time
unlist(lapply(time, '[[', 1));
unlist(lapply(time, '[[', 2));
time
time <- system.time(a<-1)
time
time[1]
unlist(lapply(time[1], '[[', 2));
unlist(lapply(time, '[[', 2));
unlist(lapply(time, '[[', 2));
unlist(lapply(time, '[[', 1));
mm <- unlist(lapply(time, '[[', 1));
mm
mm[1]
mm[2]
mm[1]
unlist(lapply(mm, '[[', 1));
unlist(lapply(mm[1], '[[', 1));
data.frame(mm)
df <- data.frame(mm)
df[1,2]
df[1,1]
df[2,1]
df[3,1]
df <- data.frame(unlist(lapply(time, '[[', 1)));
df
convertTimeToDataFrame <- function(time){
time.df <- data.frame(matrix(data=NA,nrow=1,ncol=3));
#colnames(time.df) <- c("user.time","sys.time","elapsed.time");
df <- data.frame(unlist(lapply(time, '[[', 1)));
time.df$user.time <- df[1,1];
time.df$sys.time <- df[2,1];
time.df$elapsed.time <-df[3,1];
return (time.df);
}
#Load utility functions
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//loadData.R");
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//xboostRegression.R");
results.df <- data.frame(matrix(data=NA,nrow=3,ncol=12));
colnames(results.df) <- c("Item","Utility_Type","Train_RMSE_MEAN","Train_RMSE_STD","Test_RMSE_MEAN",
"Test_RMSE_STD","RMSE","R_Squared", "MAPD","User_Time","Sys_Time","Elapsed_Time");
#Folder with training data
folder <- "C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//data//DataPoints_1K-3K-9K//";
#folder <- "//DataPoints_1K-3K-9K//";
# CONTROL CODE   ------------------------------------------------------------
modelList <- c("Linear","Discontinuous","Saturating","ALL");
modelName <- modelList[1];
datasetSize <- c("1K","3K","9K");
datasetName <- generateDataSetNames(modelName,datasetSize,0);
#for(i in c(1:length(datasetName))){
i <- 1;
fileName <- paste0(folder,datasetName[i],".csv");
dataf <- loadData(fileName);
#data_all <- read.csv(fileName,header = TRUE,sep=",");
featuresdf <- prepareFeatures(dataf,"Saturating");
#Extract training ad validation sets
totalData = dim(featuresdf)[1];
trainingSize = trunc(totalData * 0.7);
startTestIndex = totalData - trainingSize;
trainingData<- as.data.frame(featuresdf[1:trainingSize,]);
validationData<-as.data.frame(featuresdf[startTestIndex:totalData,]);
#Train model
outcomeList <- trainModel(trainingData);
outcomeList
convertTimeToDataFrame <- function(time){
#time.df <- data.frame(matrix(data=NA,nrow=1,ncol=3));
#colnames(time.df) <- c("user.time","sys.time","elapsed.time");
df <- data.frame(unlist(lapply(time, '[[', 1)));
time.df$user.time <- df[1,1];
time.df$sys.time <- df[2,1];
time.df$elapsed.time <-df[3,1];
return (time.df);
}
#Train model
outcomeList <- trainModel(trainingData);
outcomeList
#Load utility functions
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//loadData.R");
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//xboostRegression.R");
#Data structure to keep results
results.df <- data.frame(matrix(data=NA,nrow=3,ncol=12));
colnames(results.df) <- c("Item","Utility_Type","Train_RMSE_MEAN","Train_RMSE_STD","Test_RMSE_MEAN",
"Test_RMSE_STD","RMSE","R_Squared", "MAPD","User_Time","Sys_Time","Elapsed_Time");
#Folder with training data
folder <- "C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//data//DataPoints_1K-3K-9K//";
#folder <- "//DataPoints_1K-3K-9K//";
# CONTROL CODE   ------------------------------------------------------------
modelList <- c("Linear","Discontinuous","Saturating","ALL");
modelName <- modelList[1];
datasetSize <- c("1K","3K","9K");
datasetName <- generateDataSetNames(modelName,datasetSize,0);
#for(i in c(1:length(datasetName))){
i <- 1;
fileName <- paste0(folder,datasetName[i],".csv");
dataf <- loadData(fileName);
#data_all <- read.csv(fileName,header = TRUE,sep=",");
featuresdf <- prepareFeatures(dataf,"Saturating");
#Extract training ad validation sets
totalData = dim(featuresdf)[1];
trainingSize = trunc(totalData * 0.7);
startTestIndex = totalData - trainingSize;
trainingData<- as.data.frame(featuresdf[1:trainingSize,]);
validationData<-as.data.frame(featuresdf[startTestIndex:totalData,]);
#Train model
outcomeList <- trainModel(trainingData);
outcomeList
#Compute results
results.df <- validatePredictions(outcomeList,results.df,validationData);
# Train function  ---------------------------------------------------------
trainModel <- function(featuresdf){
inputFeatures <- dim(featuresdf)[2] - 1; #last column is the target variable
xgb.train.data = xgb.DMatrix(data.matrix(trainingData[,1:inputFeatures]),
label = trainingData[,"UTILITY_INCREASE"],
missing = NA);
param <- list(objective = "reg:linear", base_score = 0.5);# booster="gbtree")
#Discovers the best model
time <- system.time(trained.model <-  xgb.cv(
param=param,
data = xgb.train.data,
nfold = 10,
nrounds = 2500,
early_stopping_rounds = 500,
metrics='rmse',
verbose = FALSE)
)
best_iteration <- trained.model$best_iteration;
#trained.model$evaluation_log[best_iteration]
#Get the bes model
best.model <- xgboost(param =param,  data = xgb.train.data, nrounds=best_iteration);
#convertTimeToDataFrame(time)
return(list(best.model,trained.model, convertTimeToDataFrame(time)));
}
# Validation -------------------------------------------------------------
validatePredictions <- function(modelList, results.df,validationData){
best.model <- modelList[[1]];
trained.model <- modelList[[2]];
time.df <- modelList[[3]]
best_iteration <- trained.model$best_iteration;
y_pred <- predict(best.model, as.matrix(validationData));
error <- y_pred - validationData$UTILITY_INCREASE;
best_iteration <- trained.model$best_iteration;
results.df$Item[i] = "";
results.df$Utility_Type[i]<-datasetName[i];
results.df$Train_RMSE_MEAN[i]<-trained.model$evaluation_log[best_iteration]$train_rmse_mean;
results.df$Train_RMSE_STD[i]<-trained.model$evaluation_log[best_iteration]$train_rmse_std;
results.df$Test_RMSE_MEAN[i]<-trained.model$evaluation_log[best_iteration]$test_rmse_mean;
results.df$Test_RMSE_STD[i]<-trained.model$evaluation_log[best_iteration]$test_rmse_std;
results.df$RMSE[i] <- rmse(error);
results.df$R_Squared[i] <- r_squared(y_pred,validationData$UTILITY_INCREASE);
results.df$MAPD[i] <- mapd(y_pred,validationData$UTILITY_INCREASE);
results.df$User_Time[i] <- time.df$user.time;
results.df$Sys_Time[i] <- time.df$sys.time;
results.df$Elapsed_Time[i] <- time.df$elapsed.time;
return(results.df);
}
library(devtools)
library(xgboost)
library(r2pmml) #https://github.com/jpmml/r2pmml
# Initialization section ------------------------------------------------------
#Load utility functions
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//loadData.R");
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//xboostRegression.R");
#source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//gbmRegression.R");
#Data structure to keep results
results.df <- data.frame(matrix(data=NA,nrow=3,ncol=12));
colnames(results.df) <- c("Item","Utility_Type","Train_RMSE_MEAN","Train_RMSE_STD","Test_RMSE_MEAN",
"Test_RMSE_STD","RMSE","R_Squared", "MAPD","User_Time","Sys_Time","Elapsed_Time");
#Folder with training data
folder <- "C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//data//DataPoints_1K-3K-9K//";
#folder <- "//DataPoints_1K-3K-9K//";
# CONTROL CODE   ------------------------------------------------------------
modelList <- c("Linear","Discontinuous","Saturating","ALL");
modelName <- modelList[1];
datasetSize <- c("1K","3K","9K");
datasetName <- generateDataSetNames(modelName,datasetSize,0);
#for(i in c(1:length(datasetName))){
i <- 1;
fileName <- paste0(folder,datasetName[i],".csv");
dataf <- loadData(fileName);
#data_all <- read.csv(fileName,header = TRUE,sep=",");
featuresdf <- prepareFeatures(dataf,"Saturating");
#Extract training ad validation sets
totalData = dim(featuresdf)[1];
trainingSize = trunc(totalData * 0.7);
startTestIndex = totalData - trainingSize;
trainingData<- as.data.frame(featuresdf[1:trainingSize,]);
validationData<-as.data.frame(featuresdf[startTestIndex:totalData,]);
#Train model
outcomeList <- trainModel(trainingData);
timedf = outcomeList[[3]]
timedf$user.time
#Compute results
results.df <- validatePredictions(outcomeList,results.df,validationData);
message <- resultsToFile(results.df,modelName,"_70-30_FeatureSelection.csv"); #save to a .csv file
print(message);
View(results.df)
View(results.df)
str <- "christian medeiros adriano"
gsub(" ","",str,fixed = TRUE);
#Load utility functions
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//loadData.R");
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//xboostRegression.R");
#Folder with training data
folder <- "C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//data//DataPoints_1K-3K-9K//";
modelList <- c("Linear","Discontinuous","Saturating","ALL");
modelName <- modelList[1];
datasetSize <- c("1K","3K","9K");
datasetName <- generateDataSetNames(modelName,datasetSize,0);
#for(i in c(1:length(datasetName))){
i <- 1;
fileName <- paste0(folder,datasetName[i],".csv");
dataf <- loadData(fileName);
#data_all <- read.csv(fileName,header = TRUE,sep=",");
featuresdf <- prepareFeatures(dataf,"Saturating");
#Extract training ad validation sets
totalData = dim(featuresdf)[1];
trainingSize = trunc(totalData * 0.7);
startTestIndex = totalData - trainingSize;
trainingData<- as.data.frame(featuresdf[1:trainingSize,]);
validationData<-as.data.frame(featuresdf[startTestIndex:totalData,]);
#Train model
outcomeList <- trainModel(trainingData);
#Compute results
results.df <- validatePredictions(outcomeList,results.df,validationData);
#Compute results
results.df <- validatePredictions(outcomeList,validationData);
message <- resultsToFile(results.df,modelName,"_70-30_FeatureSelection.csv"); #save to a .csv file
print(message);
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//loadData.R");
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//xboostRegression.R");
#source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//gbmRegression.R");
#Data structure to keep results
#Folder with training data
folder <- "C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//data//DataPoints_1K-3K-9K//";
#folder <- "//DataPoints_1K-3K-9K//";
# CONTROL CODE   ------------------------------------------------------------
modelList <- c("Linear","Discontinuous","Saturating","ALL");
modelName <- modelList[1];
datasetSize <- c("1K","3K","9K");
datasetName <- generateDataSetNames(modelName,datasetSize,0);
#for(i in c(1:length(datasetName))){
i <- 1;
fileName <- paste0(folder,datasetName[i],".csv");
dataf <- loadData(fileName);
#data_all <- read.csv(fileName,header = TRUE,sep=",");
featuresdf <- prepareFeatures(dataf,"Saturating");
#Extract training ad validation sets
totalData = dim(featuresdf)[1];
trainingSize = trunc(totalData * 0.7);
startTestIndex = totalData - trainingSize;
trainingData<- as.data.frame(featuresdf[1:trainingSize,]);
validationData<-as.data.frame(featuresdf[startTestIndex:totalData,]);
#Train model
outcomeList <- trainModel(trainingData);
#Compute results
results.df <- validatePredictions(outcomeList,validationData);
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//loadData.R");
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//xboostRegression.R");
#source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//gbmRegression.R");
#Data structure to keep results
#Folder with training data
folder <- "C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//data//DataPoints_1K-3K-9K//";
#folder <- "//DataPoints_1K-3K-9K//";
# CONTROL CODE   ------------------------------------------------------------
modelList <- c("Linear","Discontinuous","Saturating","ALL");
modelName <- modelList[1];
datasetSize <- c("1K","3K","9K");
datasetName <- generateDataSetNames(modelName,datasetSize,0);
#for(i in c(1:length(datasetName))){
i <- 1;
fileName <- paste0(folder,datasetName[i],".csv");
dataf <- loadData(fileName);
#data_all <- read.csv(fileName,header = TRUE,sep=",");
featuresdf <- prepareFeatures(dataf,"Saturating");
#Extract training ad validation sets
totalData = dim(featuresdf)[1];
trainingSize = trunc(totalData * 0.7);
startTestIndex = totalData - trainingSize;
trainingData<- as.data.frame(featuresdf[1:trainingSize,]);
validationData<-as.data.frame(featuresdf[startTestIndex:totalData,]);
#Train model
outcomeList <- trainModel(trainingData);
#Compute results
results.df <- validatePredictions(outcomeList,validationData,i);
View(results.df)
View(results.df)
message <- resultsToFile(results.df,modelName,"_70-30_FeatureSelection.csv"); #save to a .csv file
print(message);
library(devtools)
library(xgboost)
library(r2pmml) #https://github.com/jpmml/r2pmml
# Initialization section ------------------------------------------------------
#Load utility functions
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//loadData.R");
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//xboostRegression.R");
#source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//gbmRegression.R");
#Data structure to keep results
#Folder with training data
folder <- "C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//data//DataPoints_1K-3K-9K//";
#folder <- "//DataPoints_1K-3K-9K//";
# CONTROL CODE   ------------------------------------------------------------
modelList <- c("Linear","Discontinuous","Saturating","ALL");
modelName <- modelList[1];
datasetSize <- c("1K","3K","9K");
datasetName <- generateDataSetNames(modelName,datasetSize,0);
#for(i in c(1:length(datasetName))){
i <- 1;
fileName <- paste0(folder,datasetName[i],".csv");
dataf <- loadData(fileName);
#data_all <- read.csv(fileName,header = TRUE,sep=",");
featuresdf <- prepareFeatures(dataf,"Saturating");
#Extract training ad validation sets
totalData = dim(featuresdf)[1];
trainingSize = trunc(totalData * 0.7);
startTestIndex = totalData - trainingSize;
trainingData<- as.data.frame(featuresdf[1:trainingSize,]);
validationData<-as.data.frame(featuresdf[startTestIndex:totalData,]);
#Train model
outcomeList <- trainModel(trainingData);
#Compute results
results.df <- validatePredictions(outcomeList,validationData,i);
#Compute results
results.df <- validatePredictions(outcomeList,validationData,i);
message <- resultsToFile(results.df,modelName,"_70-30_FeatureSelection.csv"); #save to a .csv file
print(message);
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//loadData.R");
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//xboostRegression.R");
#source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//models//gbmRegression.R");
#Data structure to keep results
#Folder with training data
folder <- "C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//data//DataPoints_1K-3K-9K//";
#folder <- "//DataPoints_1K-3K-9K//";
# CONTROL CODE   ------------------------------------------------------------
modelList <- c("Linear","Discontinuous","Saturating","ALL");
modelName <- modelList[1];
datasetSize <- c("1K","3K","9K");
datasetName <- generateDataSetNames(modelName,datasetSize,0);
#for(i in c(1:length(datasetName))){
i <- 1;
fileName <- paste0(folder,datasetName[i],".csv");
dataf <- loadData(fileName);
#data_all <- read.csv(fileName,header = TRUE,sep=",");
featuresdf <- prepareFeatures(dataf,"Saturating");
#Extract training ad validation sets
totalData = dim(featuresdf)[1];
trainingSize = trunc(totalData * 0.7);
startTestIndex = totalData - trainingSize;
trainingData<- as.data.frame(featuresdf[1:trainingSize,]);
validationData<-as.data.frame(featuresdf[startTestIndex:totalData,]);
#Train model
outcomeList <- trainModel(trainingData);
#Compute results
results.df <- validatePredictions(outcomeList,validationData,i);
message <- resultsToFile(results.df,modelName,"_70-30_FeatureSelection.csv"); #save to a .csv file
print(message);
